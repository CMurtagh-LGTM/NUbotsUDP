// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vector.proto

#include "Vector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class vecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec> _instance;
} _vec_default_instance_;
class fvecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec> _instance;
} _fvec_default_instance_;
class ivecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec> _instance;
} _ivec_default_instance_;
class uvecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec> _instance;
} _uvec_default_instance_;
class cvecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cvec> _instance;
} _cvec_default_instance_;
class vec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec2> _instance;
} _vec2_default_instance_;
class fvec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec2> _instance;
} _fvec2_default_instance_;
class ivec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec2> _instance;
} _ivec2_default_instance_;
class uvec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec2> _instance;
} _uvec2_default_instance_;
class vec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec3> _instance;
} _vec3_default_instance_;
class fvec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec3> _instance;
} _fvec3_default_instance_;
class ivec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec3> _instance;
} _ivec3_default_instance_;
class uvec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec3> _instance;
} _uvec3_default_instance_;
class vec4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec4> _instance;
} _vec4_default_instance_;
class fvec4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec4> _instance;
} _fvec4_default_instance_;
class ivec4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec4> _instance;
} _ivec4_default_instance_;
class uvec4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec4> _instance;
} _uvec4_default_instance_;
class vec5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec5> _instance;
} _vec5_default_instance_;
class fvec5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec5> _instance;
} _fvec5_default_instance_;
class ivec5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec5> _instance;
} _ivec5_default_instance_;
class uvec5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec5> _instance;
} _uvec5_default_instance_;
class vec6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec6> _instance;
} _vec6_default_instance_;
class fvec6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec6> _instance;
} _fvec6_default_instance_;
class ivec6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec6> _instance;
} _ivec6_default_instance_;
class uvec6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec6> _instance;
} _uvec6_default_instance_;
class vec7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec7> _instance;
} _vec7_default_instance_;
class fvec7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec7> _instance;
} _fvec7_default_instance_;
class ivec7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec7> _instance;
} _ivec7_default_instance_;
class uvec7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec7> _instance;
} _uvec7_default_instance_;
class vec8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec8> _instance;
} _vec8_default_instance_;
class fvec8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec8> _instance;
} _fvec8_default_instance_;
class ivec8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec8> _instance;
} _ivec8_default_instance_;
class uvec8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec8> _instance;
} _uvec8_default_instance_;
class vec9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec9> _instance;
} _vec9_default_instance_;
class fvec9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec9> _instance;
} _fvec9_default_instance_;
class ivec9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec9> _instance;
} _ivec9_default_instance_;
class uvec9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec9> _instance;
} _uvec9_default_instance_;
class vec10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec10> _instance;
} _vec10_default_instance_;
class fvec10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec10> _instance;
} _fvec10_default_instance_;
class ivec10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec10> _instance;
} _ivec10_default_instance_;
class uvec10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec10> _instance;
} _uvec10_default_instance_;
class vec11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec11> _instance;
} _vec11_default_instance_;
class fvec11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec11> _instance;
} _fvec11_default_instance_;
class ivec11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec11> _instance;
} _ivec11_default_instance_;
class uvec11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec11> _instance;
} _uvec11_default_instance_;
class vec12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec12> _instance;
} _vec12_default_instance_;
class fvec12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec12> _instance;
} _fvec12_default_instance_;
class ivec12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec12> _instance;
} _ivec12_default_instance_;
class uvec12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec12> _instance;
} _uvec12_default_instance_;
class vec13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec13> _instance;
} _vec13_default_instance_;
class fvec13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec13> _instance;
} _fvec13_default_instance_;
class ivec13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec13> _instance;
} _ivec13_default_instance_;
class uvec13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec13> _instance;
} _uvec13_default_instance_;
class vec14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec14> _instance;
} _vec14_default_instance_;
class fvec14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec14> _instance;
} _fvec14_default_instance_;
class ivec14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec14> _instance;
} _ivec14_default_instance_;
class uvec14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec14> _instance;
} _uvec14_default_instance_;
class vec15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec15> _instance;
} _vec15_default_instance_;
class fvec15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec15> _instance;
} _fvec15_default_instance_;
class ivec15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec15> _instance;
} _ivec15_default_instance_;
class uvec15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec15> _instance;
} _uvec15_default_instance_;
class vec16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<vec16> _instance;
} _vec16_default_instance_;
class fvec16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fvec16> _instance;
} _fvec16_default_instance_;
class ivec16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ivec16> _instance;
} _ivec16_default_instance_;
class uvec16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<uvec16> _instance;
} _uvec16_default_instance_;
static void InitDefaultsscc_info_cvec_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cvec_default_instance_;
    new (ptr) ::cvec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cvec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cvec_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cvec_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec_default_instance_;
    new (ptr) ::fvec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec10_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec10_default_instance_;
    new (ptr) ::fvec10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec10_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec10_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec11_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec11_default_instance_;
    new (ptr) ::fvec11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec11_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec11_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec12_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec12_default_instance_;
    new (ptr) ::fvec12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec12_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec12_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec13_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec13_default_instance_;
    new (ptr) ::fvec13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec13_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec13_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec14_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec14_default_instance_;
    new (ptr) ::fvec14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec14_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec14_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec15_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec15_default_instance_;
    new (ptr) ::fvec15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec15_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec15_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec16_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec16_default_instance_;
    new (ptr) ::fvec16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec16_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec16_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec2_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec2_default_instance_;
    new (ptr) ::fvec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec2_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec2_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec3_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec3_default_instance_;
    new (ptr) ::fvec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec3_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec3_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec4_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec4_default_instance_;
    new (ptr) ::fvec4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec4_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec4_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec5_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec5_default_instance_;
    new (ptr) ::fvec5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec5_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec5_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec6_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec6_default_instance_;
    new (ptr) ::fvec6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec6_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec6_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec7_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec7_default_instance_;
    new (ptr) ::fvec7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec7_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec7_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec8_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec8_default_instance_;
    new (ptr) ::fvec8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec8_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec8_Vector_2eproto}, {}};

static void InitDefaultsscc_info_fvec9_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_fvec9_default_instance_;
    new (ptr) ::fvec9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fvec9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fvec9_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fvec9_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec_default_instance_;
    new (ptr) ::ivec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec10_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec10_default_instance_;
    new (ptr) ::ivec10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec10_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec10_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec11_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec11_default_instance_;
    new (ptr) ::ivec11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec11_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec11_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec12_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec12_default_instance_;
    new (ptr) ::ivec12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec12_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec12_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec13_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec13_default_instance_;
    new (ptr) ::ivec13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec13_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec13_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec14_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec14_default_instance_;
    new (ptr) ::ivec14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec14_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec14_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec15_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec15_default_instance_;
    new (ptr) ::ivec15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec15_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec15_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec16_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec16_default_instance_;
    new (ptr) ::ivec16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec16_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec16_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec2_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec2_default_instance_;
    new (ptr) ::ivec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec2_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec2_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec3_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec3_default_instance_;
    new (ptr) ::ivec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec3_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec3_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec4_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec4_default_instance_;
    new (ptr) ::ivec4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec4_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec4_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec5_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec5_default_instance_;
    new (ptr) ::ivec5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec5_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec5_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec6_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec6_default_instance_;
    new (ptr) ::ivec6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec6_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec6_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec7_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec7_default_instance_;
    new (ptr) ::ivec7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec7_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec7_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec8_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec8_default_instance_;
    new (ptr) ::ivec8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec8_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec8_Vector_2eproto}, {}};

static void InitDefaultsscc_info_ivec9_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ivec9_default_instance_;
    new (ptr) ::ivec9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ivec9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ivec9_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ivec9_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec_default_instance_;
    new (ptr) ::uvec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec10_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec10_default_instance_;
    new (ptr) ::uvec10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec10_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec10_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec11_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec11_default_instance_;
    new (ptr) ::uvec11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec11_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec11_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec12_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec12_default_instance_;
    new (ptr) ::uvec12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec12_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec12_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec13_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec13_default_instance_;
    new (ptr) ::uvec13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec13_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec13_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec14_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec14_default_instance_;
    new (ptr) ::uvec14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec14_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec14_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec15_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec15_default_instance_;
    new (ptr) ::uvec15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec15_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec15_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec16_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec16_default_instance_;
    new (ptr) ::uvec16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec16_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec16_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec2_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec2_default_instance_;
    new (ptr) ::uvec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec2_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec2_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec3_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec3_default_instance_;
    new (ptr) ::uvec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec3_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec3_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec4_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec4_default_instance_;
    new (ptr) ::uvec4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec4_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec4_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec5_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec5_default_instance_;
    new (ptr) ::uvec5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec5_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec5_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec6_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec6_default_instance_;
    new (ptr) ::uvec6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec6_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec6_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec7_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec7_default_instance_;
    new (ptr) ::uvec7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec7_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec7_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec8_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec8_default_instance_;
    new (ptr) ::uvec8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec8_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec8_Vector_2eproto}, {}};

static void InitDefaultsscc_info_uvec9_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_uvec9_default_instance_;
    new (ptr) ::uvec9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uvec9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_uvec9_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_uvec9_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec_default_instance_;
    new (ptr) ::vec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec10_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec10_default_instance_;
    new (ptr) ::vec10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec10_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec10_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec11_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec11_default_instance_;
    new (ptr) ::vec11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec11_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec11_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec12_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec12_default_instance_;
    new (ptr) ::vec12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec12_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec12_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec13_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec13_default_instance_;
    new (ptr) ::vec13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec13_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec13_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec14_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec14_default_instance_;
    new (ptr) ::vec14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec14_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec14_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec15_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec15_default_instance_;
    new (ptr) ::vec15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec15_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec15_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec16_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec16_default_instance_;
    new (ptr) ::vec16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec16_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec16_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec2_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec2_default_instance_;
    new (ptr) ::vec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec2_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec2_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec3_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec3_default_instance_;
    new (ptr) ::vec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec3_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec3_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec4_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec4_default_instance_;
    new (ptr) ::vec4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec4_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec4_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec5_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec5_default_instance_;
    new (ptr) ::vec5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec5_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec5_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec6_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec6_default_instance_;
    new (ptr) ::vec6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec6_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec6_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec7_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec7_default_instance_;
    new (ptr) ::vec7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec7_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec7_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec8_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec8_default_instance_;
    new (ptr) ::vec8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec8_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec8_Vector_2eproto}, {}};

static void InitDefaultsscc_info_vec9_Vector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_vec9_default_instance_;
    new (ptr) ::vec9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vec9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_vec9_Vector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_vec9_Vector_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Vector_2eproto[65];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Vector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Vector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Vector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cvec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cvec, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec2, x_),
  PROTOBUF_FIELD_OFFSET(::vec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec2, x_),
  PROTOBUF_FIELD_OFFSET(::fvec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec2, x_),
  PROTOBUF_FIELD_OFFSET(::ivec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec2, x_),
  PROTOBUF_FIELD_OFFSET(::uvec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec3, x_),
  PROTOBUF_FIELD_OFFSET(::vec3, y_),
  PROTOBUF_FIELD_OFFSET(::vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec3, x_),
  PROTOBUF_FIELD_OFFSET(::fvec3, y_),
  PROTOBUF_FIELD_OFFSET(::fvec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec3, x_),
  PROTOBUF_FIELD_OFFSET(::ivec3, y_),
  PROTOBUF_FIELD_OFFSET(::ivec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec3, x_),
  PROTOBUF_FIELD_OFFSET(::uvec3, y_),
  PROTOBUF_FIELD_OFFSET(::uvec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec4, x_),
  PROTOBUF_FIELD_OFFSET(::vec4, y_),
  PROTOBUF_FIELD_OFFSET(::vec4, z_),
  PROTOBUF_FIELD_OFFSET(::vec4, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec4, x_),
  PROTOBUF_FIELD_OFFSET(::fvec4, y_),
  PROTOBUF_FIELD_OFFSET(::fvec4, z_),
  PROTOBUF_FIELD_OFFSET(::fvec4, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec4, x_),
  PROTOBUF_FIELD_OFFSET(::ivec4, y_),
  PROTOBUF_FIELD_OFFSET(::ivec4, z_),
  PROTOBUF_FIELD_OFFSET(::ivec4, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec4, x_),
  PROTOBUF_FIELD_OFFSET(::uvec4, y_),
  PROTOBUF_FIELD_OFFSET(::uvec4, z_),
  PROTOBUF_FIELD_OFFSET(::uvec4, t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec5, s0_),
  PROTOBUF_FIELD_OFFSET(::vec5, s1_),
  PROTOBUF_FIELD_OFFSET(::vec5, s2_),
  PROTOBUF_FIELD_OFFSET(::vec5, s3_),
  PROTOBUF_FIELD_OFFSET(::vec5, s4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec5, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec5, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec5, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec5, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec5, s4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec5, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec5, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec5, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec5, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec5, s4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec5, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec5, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec5, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec5, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec5, s4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec6, s0_),
  PROTOBUF_FIELD_OFFSET(::vec6, s1_),
  PROTOBUF_FIELD_OFFSET(::vec6, s2_),
  PROTOBUF_FIELD_OFFSET(::vec6, s3_),
  PROTOBUF_FIELD_OFFSET(::vec6, s4_),
  PROTOBUF_FIELD_OFFSET(::vec6, s5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec6, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec6, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec6, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec6, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec6, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec6, s5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec6, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec6, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec6, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec6, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec6, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec6, s5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec6, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec6, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec6, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec6, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec6, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec6, s5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec7, s0_),
  PROTOBUF_FIELD_OFFSET(::vec7, s1_),
  PROTOBUF_FIELD_OFFSET(::vec7, s2_),
  PROTOBUF_FIELD_OFFSET(::vec7, s3_),
  PROTOBUF_FIELD_OFFSET(::vec7, s4_),
  PROTOBUF_FIELD_OFFSET(::vec7, s5_),
  PROTOBUF_FIELD_OFFSET(::vec7, s6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec7, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec7, s6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec7, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec7, s6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec7, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec7, s6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec8, s0_),
  PROTOBUF_FIELD_OFFSET(::vec8, s1_),
  PROTOBUF_FIELD_OFFSET(::vec8, s2_),
  PROTOBUF_FIELD_OFFSET(::vec8, s3_),
  PROTOBUF_FIELD_OFFSET(::vec8, s4_),
  PROTOBUF_FIELD_OFFSET(::vec8, s5_),
  PROTOBUF_FIELD_OFFSET(::vec8, s6_),
  PROTOBUF_FIELD_OFFSET(::vec8, s7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec8, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec8, s7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec8, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec8, s7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec8, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec8, s7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec9, s0_),
  PROTOBUF_FIELD_OFFSET(::vec9, s1_),
  PROTOBUF_FIELD_OFFSET(::vec9, s2_),
  PROTOBUF_FIELD_OFFSET(::vec9, s3_),
  PROTOBUF_FIELD_OFFSET(::vec9, s4_),
  PROTOBUF_FIELD_OFFSET(::vec9, s5_),
  PROTOBUF_FIELD_OFFSET(::vec9, s6_),
  PROTOBUF_FIELD_OFFSET(::vec9, s7_),
  PROTOBUF_FIELD_OFFSET(::vec9, s8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec9, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec9, s8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec9, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec9, s8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec9, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec9, s8_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec10, s0_),
  PROTOBUF_FIELD_OFFSET(::vec10, s1_),
  PROTOBUF_FIELD_OFFSET(::vec10, s2_),
  PROTOBUF_FIELD_OFFSET(::vec10, s3_),
  PROTOBUF_FIELD_OFFSET(::vec10, s4_),
  PROTOBUF_FIELD_OFFSET(::vec10, s5_),
  PROTOBUF_FIELD_OFFSET(::vec10, s6_),
  PROTOBUF_FIELD_OFFSET(::vec10, s7_),
  PROTOBUF_FIELD_OFFSET(::vec10, s8_),
  PROTOBUF_FIELD_OFFSET(::vec10, s9_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec10, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec10, s9_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec10, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec10, s9_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec10, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec10, s9_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec11, s0_),
  PROTOBUF_FIELD_OFFSET(::vec11, s1_),
  PROTOBUF_FIELD_OFFSET(::vec11, s2_),
  PROTOBUF_FIELD_OFFSET(::vec11, s3_),
  PROTOBUF_FIELD_OFFSET(::vec11, s4_),
  PROTOBUF_FIELD_OFFSET(::vec11, s5_),
  PROTOBUF_FIELD_OFFSET(::vec11, s6_),
  PROTOBUF_FIELD_OFFSET(::vec11, s7_),
  PROTOBUF_FIELD_OFFSET(::vec11, s8_),
  PROTOBUF_FIELD_OFFSET(::vec11, s9_),
  PROTOBUF_FIELD_OFFSET(::vec11, sa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec11, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec11, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec11, sa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec11, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec11, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec11, sa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec11, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec11, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec11, sa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec12, s0_),
  PROTOBUF_FIELD_OFFSET(::vec12, s1_),
  PROTOBUF_FIELD_OFFSET(::vec12, s2_),
  PROTOBUF_FIELD_OFFSET(::vec12, s3_),
  PROTOBUF_FIELD_OFFSET(::vec12, s4_),
  PROTOBUF_FIELD_OFFSET(::vec12, s5_),
  PROTOBUF_FIELD_OFFSET(::vec12, s6_),
  PROTOBUF_FIELD_OFFSET(::vec12, s7_),
  PROTOBUF_FIELD_OFFSET(::vec12, s8_),
  PROTOBUF_FIELD_OFFSET(::vec12, s9_),
  PROTOBUF_FIELD_OFFSET(::vec12, sa_),
  PROTOBUF_FIELD_OFFSET(::vec12, sb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec12, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec12, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec12, sa_),
  PROTOBUF_FIELD_OFFSET(::fvec12, sb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec12, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec12, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec12, sa_),
  PROTOBUF_FIELD_OFFSET(::ivec12, sb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec12, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec12, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec12, sa_),
  PROTOBUF_FIELD_OFFSET(::uvec12, sb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec13, s0_),
  PROTOBUF_FIELD_OFFSET(::vec13, s1_),
  PROTOBUF_FIELD_OFFSET(::vec13, s2_),
  PROTOBUF_FIELD_OFFSET(::vec13, s3_),
  PROTOBUF_FIELD_OFFSET(::vec13, s4_),
  PROTOBUF_FIELD_OFFSET(::vec13, s5_),
  PROTOBUF_FIELD_OFFSET(::vec13, s6_),
  PROTOBUF_FIELD_OFFSET(::vec13, s7_),
  PROTOBUF_FIELD_OFFSET(::vec13, s8_),
  PROTOBUF_FIELD_OFFSET(::vec13, s9_),
  PROTOBUF_FIELD_OFFSET(::vec13, sa_),
  PROTOBUF_FIELD_OFFSET(::vec13, sb_),
  PROTOBUF_FIELD_OFFSET(::vec13, sc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec13, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec13, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec13, sa_),
  PROTOBUF_FIELD_OFFSET(::fvec13, sb_),
  PROTOBUF_FIELD_OFFSET(::fvec13, sc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec13, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec13, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec13, sa_),
  PROTOBUF_FIELD_OFFSET(::ivec13, sb_),
  PROTOBUF_FIELD_OFFSET(::ivec13, sc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec13, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec13, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec13, sa_),
  PROTOBUF_FIELD_OFFSET(::uvec13, sb_),
  PROTOBUF_FIELD_OFFSET(::uvec13, sc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec14, s0_),
  PROTOBUF_FIELD_OFFSET(::vec14, s1_),
  PROTOBUF_FIELD_OFFSET(::vec14, s2_),
  PROTOBUF_FIELD_OFFSET(::vec14, s3_),
  PROTOBUF_FIELD_OFFSET(::vec14, s4_),
  PROTOBUF_FIELD_OFFSET(::vec14, s5_),
  PROTOBUF_FIELD_OFFSET(::vec14, s6_),
  PROTOBUF_FIELD_OFFSET(::vec14, s7_),
  PROTOBUF_FIELD_OFFSET(::vec14, s8_),
  PROTOBUF_FIELD_OFFSET(::vec14, s9_),
  PROTOBUF_FIELD_OFFSET(::vec14, sa_),
  PROTOBUF_FIELD_OFFSET(::vec14, sb_),
  PROTOBUF_FIELD_OFFSET(::vec14, sc_),
  PROTOBUF_FIELD_OFFSET(::vec14, sd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec14, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec14, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec14, sa_),
  PROTOBUF_FIELD_OFFSET(::fvec14, sb_),
  PROTOBUF_FIELD_OFFSET(::fvec14, sc_),
  PROTOBUF_FIELD_OFFSET(::fvec14, sd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec14, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec14, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec14, sa_),
  PROTOBUF_FIELD_OFFSET(::ivec14, sb_),
  PROTOBUF_FIELD_OFFSET(::ivec14, sc_),
  PROTOBUF_FIELD_OFFSET(::ivec14, sd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec14, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec14, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec14, sa_),
  PROTOBUF_FIELD_OFFSET(::uvec14, sb_),
  PROTOBUF_FIELD_OFFSET(::uvec14, sc_),
  PROTOBUF_FIELD_OFFSET(::uvec14, sd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec15, s0_),
  PROTOBUF_FIELD_OFFSET(::vec15, s1_),
  PROTOBUF_FIELD_OFFSET(::vec15, s2_),
  PROTOBUF_FIELD_OFFSET(::vec15, s3_),
  PROTOBUF_FIELD_OFFSET(::vec15, s4_),
  PROTOBUF_FIELD_OFFSET(::vec15, s5_),
  PROTOBUF_FIELD_OFFSET(::vec15, s6_),
  PROTOBUF_FIELD_OFFSET(::vec15, s7_),
  PROTOBUF_FIELD_OFFSET(::vec15, s8_),
  PROTOBUF_FIELD_OFFSET(::vec15, s9_),
  PROTOBUF_FIELD_OFFSET(::vec15, sa_),
  PROTOBUF_FIELD_OFFSET(::vec15, sb_),
  PROTOBUF_FIELD_OFFSET(::vec15, sc_),
  PROTOBUF_FIELD_OFFSET(::vec15, sd_),
  PROTOBUF_FIELD_OFFSET(::vec15, se_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec15, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec15, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec15, sa_),
  PROTOBUF_FIELD_OFFSET(::fvec15, sb_),
  PROTOBUF_FIELD_OFFSET(::fvec15, sc_),
  PROTOBUF_FIELD_OFFSET(::fvec15, sd_),
  PROTOBUF_FIELD_OFFSET(::fvec15, se_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec15, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec15, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec15, sa_),
  PROTOBUF_FIELD_OFFSET(::ivec15, sb_),
  PROTOBUF_FIELD_OFFSET(::ivec15, sc_),
  PROTOBUF_FIELD_OFFSET(::ivec15, sd_),
  PROTOBUF_FIELD_OFFSET(::ivec15, se_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec15, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec15, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec15, sa_),
  PROTOBUF_FIELD_OFFSET(::uvec15, sb_),
  PROTOBUF_FIELD_OFFSET(::uvec15, sc_),
  PROTOBUF_FIELD_OFFSET(::uvec15, sd_),
  PROTOBUF_FIELD_OFFSET(::uvec15, se_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vec16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vec16, s0_),
  PROTOBUF_FIELD_OFFSET(::vec16, s1_),
  PROTOBUF_FIELD_OFFSET(::vec16, s2_),
  PROTOBUF_FIELD_OFFSET(::vec16, s3_),
  PROTOBUF_FIELD_OFFSET(::vec16, s4_),
  PROTOBUF_FIELD_OFFSET(::vec16, s5_),
  PROTOBUF_FIELD_OFFSET(::vec16, s6_),
  PROTOBUF_FIELD_OFFSET(::vec16, s7_),
  PROTOBUF_FIELD_OFFSET(::vec16, s8_),
  PROTOBUF_FIELD_OFFSET(::vec16, s9_),
  PROTOBUF_FIELD_OFFSET(::vec16, sa_),
  PROTOBUF_FIELD_OFFSET(::vec16, sb_),
  PROTOBUF_FIELD_OFFSET(::vec16, sc_),
  PROTOBUF_FIELD_OFFSET(::vec16, sd_),
  PROTOBUF_FIELD_OFFSET(::vec16, se_),
  PROTOBUF_FIELD_OFFSET(::vec16, sf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fvec16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fvec16, s0_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s1_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s2_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s3_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s4_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s5_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s6_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s7_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s8_),
  PROTOBUF_FIELD_OFFSET(::fvec16, s9_),
  PROTOBUF_FIELD_OFFSET(::fvec16, sa_),
  PROTOBUF_FIELD_OFFSET(::fvec16, sb_),
  PROTOBUF_FIELD_OFFSET(::fvec16, sc_),
  PROTOBUF_FIELD_OFFSET(::fvec16, sd_),
  PROTOBUF_FIELD_OFFSET(::fvec16, se_),
  PROTOBUF_FIELD_OFFSET(::fvec16, sf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ivec16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ivec16, s0_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s1_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s2_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s3_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s4_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s5_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s6_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s7_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s8_),
  PROTOBUF_FIELD_OFFSET(::ivec16, s9_),
  PROTOBUF_FIELD_OFFSET(::ivec16, sa_),
  PROTOBUF_FIELD_OFFSET(::ivec16, sb_),
  PROTOBUF_FIELD_OFFSET(::ivec16, sc_),
  PROTOBUF_FIELD_OFFSET(::ivec16, sd_),
  PROTOBUF_FIELD_OFFSET(::ivec16, se_),
  PROTOBUF_FIELD_OFFSET(::ivec16, sf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uvec16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uvec16, s0_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s1_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s2_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s3_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s4_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s5_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s6_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s7_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s8_),
  PROTOBUF_FIELD_OFFSET(::uvec16, s9_),
  PROTOBUF_FIELD_OFFSET(::uvec16, sa_),
  PROTOBUF_FIELD_OFFSET(::uvec16, sb_),
  PROTOBUF_FIELD_OFFSET(::uvec16, sc_),
  PROTOBUF_FIELD_OFFSET(::uvec16, sd_),
  PROTOBUF_FIELD_OFFSET(::uvec16, se_),
  PROTOBUF_FIELD_OFFSET(::uvec16, sf_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vec)},
  { 6, -1, sizeof(::fvec)},
  { 12, -1, sizeof(::ivec)},
  { 18, -1, sizeof(::uvec)},
  { 24, -1, sizeof(::cvec)},
  { 30, -1, sizeof(::vec2)},
  { 37, -1, sizeof(::fvec2)},
  { 44, -1, sizeof(::ivec2)},
  { 51, -1, sizeof(::uvec2)},
  { 58, -1, sizeof(::vec3)},
  { 66, -1, sizeof(::fvec3)},
  { 74, -1, sizeof(::ivec3)},
  { 82, -1, sizeof(::uvec3)},
  { 90, -1, sizeof(::vec4)},
  { 99, -1, sizeof(::fvec4)},
  { 108, -1, sizeof(::ivec4)},
  { 117, -1, sizeof(::uvec4)},
  { 126, -1, sizeof(::vec5)},
  { 136, -1, sizeof(::fvec5)},
  { 146, -1, sizeof(::ivec5)},
  { 156, -1, sizeof(::uvec5)},
  { 166, -1, sizeof(::vec6)},
  { 177, -1, sizeof(::fvec6)},
  { 188, -1, sizeof(::ivec6)},
  { 199, -1, sizeof(::uvec6)},
  { 210, -1, sizeof(::vec7)},
  { 222, -1, sizeof(::fvec7)},
  { 234, -1, sizeof(::ivec7)},
  { 246, -1, sizeof(::uvec7)},
  { 258, -1, sizeof(::vec8)},
  { 271, -1, sizeof(::fvec8)},
  { 284, -1, sizeof(::ivec8)},
  { 297, -1, sizeof(::uvec8)},
  { 310, -1, sizeof(::vec9)},
  { 324, -1, sizeof(::fvec9)},
  { 338, -1, sizeof(::ivec9)},
  { 352, -1, sizeof(::uvec9)},
  { 366, -1, sizeof(::vec10)},
  { 381, -1, sizeof(::fvec10)},
  { 396, -1, sizeof(::ivec10)},
  { 411, -1, sizeof(::uvec10)},
  { 426, -1, sizeof(::vec11)},
  { 442, -1, sizeof(::fvec11)},
  { 458, -1, sizeof(::ivec11)},
  { 474, -1, sizeof(::uvec11)},
  { 490, -1, sizeof(::vec12)},
  { 507, -1, sizeof(::fvec12)},
  { 524, -1, sizeof(::ivec12)},
  { 541, -1, sizeof(::uvec12)},
  { 558, -1, sizeof(::vec13)},
  { 576, -1, sizeof(::fvec13)},
  { 594, -1, sizeof(::ivec13)},
  { 612, -1, sizeof(::uvec13)},
  { 630, -1, sizeof(::vec14)},
  { 649, -1, sizeof(::fvec14)},
  { 668, -1, sizeof(::ivec14)},
  { 687, -1, sizeof(::uvec14)},
  { 706, -1, sizeof(::vec15)},
  { 726, -1, sizeof(::fvec15)},
  { 746, -1, sizeof(::ivec15)},
  { 766, -1, sizeof(::uvec15)},
  { 786, -1, sizeof(::vec16)},
  { 807, -1, sizeof(::fvec16)},
  { 828, -1, sizeof(::ivec16)},
  { 849, -1, sizeof(::uvec16)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cvec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_vec16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_fvec16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ivec16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_uvec16_default_instance_),
};

const char descriptor_table_protodef_Vector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Vector.proto\"\024\n\003vec\022\r\n\001v\030\001 \003(\001B\002\020\001\"\025\n\004"
  "fvec\022\r\n\001v\030\001 \003(\002B\002\020\001\"\025\n\004ivec\022\r\n\001v\030\001 \003(\017B\002"
  "\020\001\"\025\n\004uvec\022\r\n\001v\030\001 \003(\007B\002\020\001\"\021\n\004cvec\022\t\n\001v\030\001"
  " \001(\014\"\034\n\004vec2\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\035\n\005fv"
  "ec2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\035\n\005ivec2\022\t\n\001x\030"
  "\001 \001(\021\022\t\n\001y\030\002 \001(\021\"\035\n\005uvec2\022\t\n\001x\030\001 \001(\r\022\t\n\001"
  "y\030\002 \001(\r\"\'\n\004vec3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n"
  "\001z\030\003 \001(\001\"(\n\005fvec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022"
  "\t\n\001z\030\003 \001(\002\"(\n\005ivec3\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001("
  "\021\022\t\n\001z\030\003 \001(\021\"(\n\005uvec3\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 "
  "\001(\r\022\t\n\001z\030\003 \001(\r\"2\n\004vec4\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002"
  " \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001t\030\004 \001(\001\"3\n\005fvec4\022\t\n\001x"
  "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001t\030\004 \001(\002\""
  "3\n\005ivec4\022\t\n\001x\030\001 \001(\021\022\t\n\001y\030\002 \001(\021\022\t\n\001z\030\003 \001("
  "\021\022\t\n\001t\030\004 \001(\021\"3\n\005uvec4\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 "
  "\001(\r\022\t\n\001z\030\003 \001(\r\022\t\n\001t\030\004 \001(\r\"B\n\004vec5\022\n\n\002s0\030"
  "\001 \001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001("
  "\001\022\n\n\002s4\030\005 \001(\001\"C\n\005fvec5\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1"
  "\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001"
  "(\002\"C\n\005ivec5\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002s"
  "2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\"C\n\005uvec5"
  "\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002"
  "s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\"N\n\004vec6\022\n\n\002s0\030\001 \001(\001"
  "\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002"
  "s4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\"O\n\005fvec6\022\n\n\002s0\030\001 \001("
  "\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n"
  "\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002\"O\n\005ivec6\022\n\n\002s0\030\001 \001"
  "(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n"
  "\n\002s4\030\005 \001(\021\022\n\n\002s5\030\006 \001(\021\"O\n\005uvec6\022\n\n\002s0\030\001 "
  "\001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030\004 \001(\r\022"
  "\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\"Z\n\004vec7\022\n\n\002s0\030\001 "
  "\001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022"
  "\n\n\002s4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\"[\n\005f"
  "vec7\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002"
  "\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002\022\n\n\002"
  "s6\030\007 \001(\002\"[\n\005ivec7\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001("
  "\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n"
  "\002s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\"[\n\005uvec7\022\n\n\002s0\030\001 \001"
  "(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030\004 \001(\r\022\n"
  "\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030\007 \001(\r\"f\n\004ve"
  "c8\022\n\n\002s0\030\001 \001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n"
  "\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6"
  "\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\"g\n\005fvec8\022\n\n\002s0\030\001 \001(\002\022"
  "\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s"
  "4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 "
  "\001(\002\"g\n\005ivec8\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002"
  "s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002s5\030\006"
  " \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\"g\n\005uvec8\022\n\n"
  "\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030"
  "\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030\007 \001("
  "\r\022\n\n\002s7\030\010 \001(\r\"r\n\004vec9\022\n\n\002s0\030\001 \001(\001\022\n\n\002s1\030"
  "\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 \001("
  "\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\022\n\n"
  "\002s8\030\t \001(\001\"s\n\005fvec9\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001"
  "(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n"
  "\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002s8"
  "\030\t \001(\002\"s\n\005ivec9\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022"
  "\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002s"
  "5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\022\n\n\002s8\030\t "
  "\001(\021\"s\n\005uvec9\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002"
  "s2\030\003 \001(\r\022\n\n\002s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006"
  " \001(\r\022\n\n\002s6\030\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r"
  "\"\177\n\005vec10\022\n\n\002s0\030\001 \001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030"
  "\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 \001(\001\022\n\n\002s5\030\006 \001("
  "\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\022\n\n\002s8\030\t \001(\001\022\n\n"
  "\002s9\030\n \001(\001\"\200\001\n\006fvec10\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002"
  " \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002"
  "\022\n\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002"
  "s8\030\t \001(\002\022\n\n\002s9\030\n \001(\002\"\200\001\n\006ivec10\022\n\n\002s0\030\001 "
  "\001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022"
  "\n\n\002s4\030\005 \001(\021\022\n\n\002s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s"
  "7\030\010 \001(\021\022\n\n\002s8\030\t \001(\021\022\n\n\002s9\030\n \001(\021\"\200\001\n\006uvec"
  "10\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n"
  "\n\002s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6"
  "\030\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002s9\030\n \001"
  "(\r\"\213\001\n\005vec11\022\n\n\002s0\030\001 \001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002"
  "s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 \001(\001\022\n\n\002s5\030\006"
  " \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\022\n\n\002s8\030\t \001(\001"
  "\022\n\n\002s9\030\n \001(\001\022\n\n\002sa\030\013 \001(\001\"\214\001\n\006fvec11\022\n\n\002s"
  "0\030\001 \001(\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 "
  "\001(\002\022\n\n\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022"
  "\n\n\002s7\030\010 \001(\002\022\n\n\002s8\030\t \001(\002\022\n\n\002s9\030\n \001(\002\022\n\n\002s"
  "a\030\013 \001(\002\"\214\001\n\006ivec11\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001"
  "(\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n"
  "\n\002s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\022\n\n\002s8"
  "\030\t \001(\021\022\n\n\002s9\030\n \001(\021\022\n\n\002sa\030\013 \001(\021\"\214\001\n\006uvec1"
  "1\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n"
  "\002s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030"
  "\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002s9\030\n \001("
  "\r\022\n\n\002sa\030\013 \001(\r\"\227\001\n\005vec12\022\n\n\002s0\030\001 \001(\001\022\n\n\002s"
  "1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 "
  "\001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\022"
  "\n\n\002s8\030\t \001(\001\022\n\n\002s9\030\n \001(\001\022\n\n\002sa\030\013 \001(\001\022\n\n\002s"
  "b\030\014 \001(\001\"\230\001\n\006fvec12\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001"
  "(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n"
  "\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002s8"
  "\030\t \001(\002\022\n\n\002s9\030\n \001(\002\022\n\n\002sa\030\013 \001(\002\022\n\n\002sb\030\014 \001"
  "(\002\"\230\001\n\006ivec12\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n"
  "\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002s5\030"
  "\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\022\n\n\002s8\030\t \001("
  "\021\022\n\n\002s9\030\n \001(\021\022\n\n\002sa\030\013 \001(\021\022\n\n\002sb\030\014 \001(\021\"\230\001"
  "\n\006uvec12\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003"
  " \001(\r\022\n\n\002s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r"
  "\022\n\n\002s6\030\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002"
  "s9\030\n \001(\r\022\n\n\002sa\030\013 \001(\r\022\n\n\002sb\030\014 \001(\r\"\243\001\n\005vec"
  "13\022\n\n\002s0\030\001 \001(\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n"
  "\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6"
  "\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001\022\n\n\002s8\030\t \001(\001\022\n\n\002s9\030\n \001"
  "(\001\022\n\n\002sa\030\013 \001(\001\022\n\n\002sb\030\014 \001(\001\022\n\n\002sc\030\r \001(\001\"\244"
  "\001\n\006fvec13\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030"
  "\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001("
  "\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002s8\030\t \001(\002\022\n\n"
  "\002s9\030\n \001(\002\022\n\n\002sa\030\013 \001(\002\022\n\n\002sb\030\014 \001(\002\022\n\n\002sc\030"
  "\r \001(\002\"\244\001\n\006ivec13\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021"
  "\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002"
  "s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\022\n\n\002s8\030\t"
  " \001(\021\022\n\n\002s9\030\n \001(\021\022\n\n\002sa\030\013 \001(\021\022\n\n\002sb\030\014 \001(\021"
  "\022\n\n\002sc\030\r \001(\021\"\244\001\n\006uvec13\022\n\n\002s0\030\001 \001(\r\022\n\n\002s"
  "1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030\004 \001(\r\022\n\n\002s4\030\005 "
  "\001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022"
  "\n\n\002s8\030\t \001(\r\022\n\n\002s9\030\n \001(\r\022\n\n\002sa\030\013 \001(\r\022\n\n\002s"
  "b\030\014 \001(\r\022\n\n\002sc\030\r \001(\r\"\257\001\n\005vec14\022\n\n\002s0\030\001 \001("
  "\001\022\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n"
  "\002s4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030"
  "\010 \001(\001\022\n\n\002s8\030\t \001(\001\022\n\n\002s9\030\n \001(\001\022\n\n\002sa\030\013 \001("
  "\001\022\n\n\002sb\030\014 \001(\001\022\n\n\002sc\030\r \001(\001\022\n\n\002sd\030\016 \001(\001\"\260\001"
  "\n\006fvec14\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003"
  " \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002"
  "\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002s8\030\t \001(\002\022\n\n\002"
  "s9\030\n \001(\002\022\n\n\002sa\030\013 \001(\002\022\n\n\002sb\030\014 \001(\002\022\n\n\002sc\030\r"
  " \001(\002\022\n\n\002sd\030\016 \001(\002\"\260\001\n\006ivec14\022\n\n\002s0\030\001 \001(\021\022"
  "\n\n\002s1\030\002 \001(\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s"
  "4\030\005 \001(\021\022\n\n\002s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 "
  "\001(\021\022\n\n\002s8\030\t \001(\021\022\n\n\002s9\030\n \001(\021\022\n\n\002sa\030\013 \001(\021\022"
  "\n\n\002sb\030\014 \001(\021\022\n\n\002sc\030\r \001(\021\022\n\n\002sd\030\016 \001(\021\"\260\001\n\006"
  "uvec14\022\n\n\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001"
  "(\r\022\n\n\002s3\030\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n"
  "\n\002s6\030\007 \001(\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002s9"
  "\030\n \001(\r\022\n\n\002sa\030\013 \001(\r\022\n\n\002sb\030\014 \001(\r\022\n\n\002sc\030\r \001"
  "(\r\022\n\n\002sd\030\016 \001(\r\"\273\001\n\005vec15\022\n\n\002s0\030\001 \001(\001\022\n\n\002"
  "s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s4\030\005"
  " \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 \001(\001"
  "\022\n\n\002s8\030\t \001(\001\022\n\n\002s9\030\n \001(\001\022\n\n\002sa\030\013 \001(\001\022\n\n\002"
  "sb\030\014 \001(\001\022\n\n\002sc\030\r \001(\001\022\n\n\002sd\030\016 \001(\001\022\n\n\002se\030\017"
  " \001(\001\"\274\001\n\006fvec15\022\n\n\002s0\030\001 \001(\002\022\n\n\002s1\030\002 \001(\002\022"
  "\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n\n\002s4\030\005 \001(\002\022\n\n\002s"
  "5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7\030\010 \001(\002\022\n\n\002s8\030\t "
  "\001(\002\022\n\n\002s9\030\n \001(\002\022\n\n\002sa\030\013 \001(\002\022\n\n\002sb\030\014 \001(\002\022"
  "\n\n\002sc\030\r \001(\002\022\n\n\002sd\030\016 \001(\002\022\n\n\002se\030\017 \001(\002\"\274\001\n\006"
  "ivec15\022\n\n\002s0\030\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002s2\030\003 \001"
  "(\021\022\n\n\002s3\030\004 \001(\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002s5\030\006 \001(\021\022\n"
  "\n\002s6\030\007 \001(\021\022\n\n\002s7\030\010 \001(\021\022\n\n\002s8\030\t \001(\021\022\n\n\002s9"
  "\030\n \001(\021\022\n\n\002sa\030\013 \001(\021\022\n\n\002sb\030\014 \001(\021\022\n\n\002sc\030\r \001"
  "(\021\022\n\n\002sd\030\016 \001(\021\022\n\n\002se\030\017 \001(\021\"\274\001\n\006uvec15\022\n\n"
  "\002s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030"
  "\004 \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030\007 \001("
  "\r\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002s9\030\n \001(\r\022\n\n"
  "\002sa\030\013 \001(\r\022\n\n\002sb\030\014 \001(\r\022\n\n\002sc\030\r \001(\r\022\n\n\002sd\030"
  "\016 \001(\r\022\n\n\002se\030\017 \001(\r\"\307\001\n\005vec16\022\n\n\002s0\030\001 \001(\001\022"
  "\n\n\002s1\030\002 \001(\001\022\n\n\002s2\030\003 \001(\001\022\n\n\002s3\030\004 \001(\001\022\n\n\002s"
  "4\030\005 \001(\001\022\n\n\002s5\030\006 \001(\001\022\n\n\002s6\030\007 \001(\001\022\n\n\002s7\030\010 "
  "\001(\001\022\n\n\002s8\030\t \001(\001\022\n\n\002s9\030\n \001(\001\022\n\n\002sa\030\013 \001(\001\022"
  "\n\n\002sb\030\014 \001(\001\022\n\n\002sc\030\r \001(\001\022\n\n\002sd\030\016 \001(\001\022\n\n\002s"
  "e\030\017 \001(\001\022\n\n\002sf\030\020 \001(\001\"\310\001\n\006fvec16\022\n\n\002s0\030\001 \001"
  "(\002\022\n\n\002s1\030\002 \001(\002\022\n\n\002s2\030\003 \001(\002\022\n\n\002s3\030\004 \001(\002\022\n"
  "\n\002s4\030\005 \001(\002\022\n\n\002s5\030\006 \001(\002\022\n\n\002s6\030\007 \001(\002\022\n\n\002s7"
  "\030\010 \001(\002\022\n\n\002s8\030\t \001(\002\022\n\n\002s9\030\n \001(\002\022\n\n\002sa\030\013 \001"
  "(\002\022\n\n\002sb\030\014 \001(\002\022\n\n\002sc\030\r \001(\002\022\n\n\002sd\030\016 \001(\002\022\n"
  "\n\002se\030\017 \001(\002\022\n\n\002sf\030\020 \001(\002\"\310\001\n\006ivec16\022\n\n\002s0\030"
  "\001 \001(\021\022\n\n\002s1\030\002 \001(\021\022\n\n\002s2\030\003 \001(\021\022\n\n\002s3\030\004 \001("
  "\021\022\n\n\002s4\030\005 \001(\021\022\n\n\002s5\030\006 \001(\021\022\n\n\002s6\030\007 \001(\021\022\n\n"
  "\002s7\030\010 \001(\021\022\n\n\002s8\030\t \001(\021\022\n\n\002s9\030\n \001(\021\022\n\n\002sa\030"
  "\013 \001(\021\022\n\n\002sb\030\014 \001(\021\022\n\n\002sc\030\r \001(\021\022\n\n\002sd\030\016 \001("
  "\021\022\n\n\002se\030\017 \001(\021\022\n\n\002sf\030\020 \001(\021\"\310\001\n\006uvec16\022\n\n\002"
  "s0\030\001 \001(\r\022\n\n\002s1\030\002 \001(\r\022\n\n\002s2\030\003 \001(\r\022\n\n\002s3\030\004"
  " \001(\r\022\n\n\002s4\030\005 \001(\r\022\n\n\002s5\030\006 \001(\r\022\n\n\002s6\030\007 \001(\r"
  "\022\n\n\002s7\030\010 \001(\r\022\n\n\002s8\030\t \001(\r\022\n\n\002s9\030\n \001(\r\022\n\n\002"
  "sa\030\013 \001(\r\022\n\n\002sb\030\014 \001(\r\022\n\n\002sc\030\r \001(\r\022\n\n\002sd\030\016"
  " \001(\r\022\n\n\002se\030\017 \001(\r\022\n\n\002sf\030\020 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Vector_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Vector_2eproto_sccs[65] = {
  &scc_info_cvec_Vector_2eproto.base,
  &scc_info_fvec_Vector_2eproto.base,
  &scc_info_fvec10_Vector_2eproto.base,
  &scc_info_fvec11_Vector_2eproto.base,
  &scc_info_fvec12_Vector_2eproto.base,
  &scc_info_fvec13_Vector_2eproto.base,
  &scc_info_fvec14_Vector_2eproto.base,
  &scc_info_fvec15_Vector_2eproto.base,
  &scc_info_fvec16_Vector_2eproto.base,
  &scc_info_fvec2_Vector_2eproto.base,
  &scc_info_fvec3_Vector_2eproto.base,
  &scc_info_fvec4_Vector_2eproto.base,
  &scc_info_fvec5_Vector_2eproto.base,
  &scc_info_fvec6_Vector_2eproto.base,
  &scc_info_fvec7_Vector_2eproto.base,
  &scc_info_fvec8_Vector_2eproto.base,
  &scc_info_fvec9_Vector_2eproto.base,
  &scc_info_ivec_Vector_2eproto.base,
  &scc_info_ivec10_Vector_2eproto.base,
  &scc_info_ivec11_Vector_2eproto.base,
  &scc_info_ivec12_Vector_2eproto.base,
  &scc_info_ivec13_Vector_2eproto.base,
  &scc_info_ivec14_Vector_2eproto.base,
  &scc_info_ivec15_Vector_2eproto.base,
  &scc_info_ivec16_Vector_2eproto.base,
  &scc_info_ivec2_Vector_2eproto.base,
  &scc_info_ivec3_Vector_2eproto.base,
  &scc_info_ivec4_Vector_2eproto.base,
  &scc_info_ivec5_Vector_2eproto.base,
  &scc_info_ivec6_Vector_2eproto.base,
  &scc_info_ivec7_Vector_2eproto.base,
  &scc_info_ivec8_Vector_2eproto.base,
  &scc_info_ivec9_Vector_2eproto.base,
  &scc_info_uvec_Vector_2eproto.base,
  &scc_info_uvec10_Vector_2eproto.base,
  &scc_info_uvec11_Vector_2eproto.base,
  &scc_info_uvec12_Vector_2eproto.base,
  &scc_info_uvec13_Vector_2eproto.base,
  &scc_info_uvec14_Vector_2eproto.base,
  &scc_info_uvec15_Vector_2eproto.base,
  &scc_info_uvec16_Vector_2eproto.base,
  &scc_info_uvec2_Vector_2eproto.base,
  &scc_info_uvec3_Vector_2eproto.base,
  &scc_info_uvec4_Vector_2eproto.base,
  &scc_info_uvec5_Vector_2eproto.base,
  &scc_info_uvec6_Vector_2eproto.base,
  &scc_info_uvec7_Vector_2eproto.base,
  &scc_info_uvec8_Vector_2eproto.base,
  &scc_info_uvec9_Vector_2eproto.base,
  &scc_info_vec_Vector_2eproto.base,
  &scc_info_vec10_Vector_2eproto.base,
  &scc_info_vec11_Vector_2eproto.base,
  &scc_info_vec12_Vector_2eproto.base,
  &scc_info_vec13_Vector_2eproto.base,
  &scc_info_vec14_Vector_2eproto.base,
  &scc_info_vec15_Vector_2eproto.base,
  &scc_info_vec16_Vector_2eproto.base,
  &scc_info_vec2_Vector_2eproto.base,
  &scc_info_vec3_Vector_2eproto.base,
  &scc_info_vec4_Vector_2eproto.base,
  &scc_info_vec5_Vector_2eproto.base,
  &scc_info_vec6_Vector_2eproto.base,
  &scc_info_vec7_Vector_2eproto.base,
  &scc_info_vec8_Vector_2eproto.base,
  &scc_info_vec9_Vector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Vector_2eproto_once;
static bool descriptor_table_Vector_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Vector_2eproto = {
  &descriptor_table_Vector_2eproto_initialized, descriptor_table_protodef_Vector_2eproto, "Vector.proto", 7156,
  &descriptor_table_Vector_2eproto_once, descriptor_table_Vector_2eproto_sccs, descriptor_table_Vector_2eproto_deps, 65, 0,
  schemas, file_default_instances, TableStruct_Vector_2eproto::offsets,
  file_level_metadata_Vector_2eproto, 65, file_level_enum_descriptors_Vector_2eproto, file_level_service_descriptors_Vector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Vector_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Vector_2eproto), true);

// ===================================================================

void vec::InitAsDefaultInstance() {
}
class vec::_Internal {
 public:
};

vec::vec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec)
}
vec::vec(const vec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vec)
}

void vec::SharedCtor() {
}

vec::~vec() {
  // @@protoc_insertion_point(destructor:vec)
  SharedDtor();
}

void vec::SharedDtor() {
}

void vec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec& vec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec::Clear() {
// @@protoc_insertion_point(message_clear_start:vec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear();
}

const char* vec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double v = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double v = 1 [packed = true];
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec)
  return target;
}

size_t vec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double v = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec)
  GOOGLE_DCHECK_NE(&from, this);
  const vec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec)
    MergeFrom(*source);
  }
}

void vec::MergeFrom(const vec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void vec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec::CopyFrom(const vec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec::IsInitialized() const {
  return true;
}

void vec::InternalSwap(vec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec::InitAsDefaultInstance() {
}
class fvec::_Internal {
 public:
};

fvec::fvec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec)
}
fvec::fvec(const fvec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fvec)
}

void fvec::SharedCtor() {
}

fvec::~fvec() {
  // @@protoc_insertion_point(destructor:fvec)
  SharedDtor();
}

void fvec::SharedDtor() {
}

void fvec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec& fvec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear();
}

const char* fvec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float v = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float v = 1 [packed = true];
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec)
  return target;
}

size_t fvec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float v = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec)
    MergeFrom(*source);
  }
}

void fvec::MergeFrom(const fvec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void fvec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec::CopyFrom(const fvec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec::IsInitialized() const {
  return true;
}

void fvec::InternalSwap(fvec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec::InitAsDefaultInstance() {
}
class ivec::_Internal {
 public:
};

ivec::ivec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec)
}
ivec::ivec(const ivec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ivec)
}

void ivec::SharedCtor() {
}

ivec::~ivec() {
  // @@protoc_insertion_point(destructor:ivec)
  SharedDtor();
}

void ivec::SharedDtor() {
}

void ivec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec& ivec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear();
}

const char* ivec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sfixed32 v = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sfixed32 v = 1 [packed = true];
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec)
  return target;
}

size_t ivec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed32 v = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec)
    MergeFrom(*source);
  }
}

void ivec::MergeFrom(const ivec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void ivec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec::CopyFrom(const ivec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec::IsInitialized() const {
  return true;
}

void ivec::InternalSwap(ivec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec::InitAsDefaultInstance() {
}
class uvec::_Internal {
 public:
};

uvec::uvec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec)
}
uvec::uvec(const uvec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      v_(from.v_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uvec)
}

void uvec::SharedCtor() {
}

uvec::~uvec() {
  // @@protoc_insertion_point(destructor:uvec)
  SharedDtor();
}

void uvec::SharedDtor() {
}

void uvec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec& uvec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.Clear();
  _internal_metadata_.Clear();
}

const char* uvec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 v = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_v(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_v(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 v = 1 [packed = true];
  if (this->_internal_v_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec)
  return target;
}

size_t uvec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 v = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_v_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec)
    MergeFrom(*source);
  }
}

void uvec::MergeFrom(const uvec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v_.MergeFrom(from.v_);
}

void uvec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec::CopyFrom(const uvec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec::IsInitialized() const {
  return true;
}

void uvec::InternalSwap(uvec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_.InternalSwap(&other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cvec::InitAsDefaultInstance() {
}
class cvec::_Internal {
 public:
};

cvec::cvec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cvec)
}
cvec::cvec(const cvec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_v().empty()) {
    v_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_);
  }
  // @@protoc_insertion_point(copy_constructor:cvec)
}

void cvec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cvec_Vector_2eproto.base);
  v_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

cvec::~cvec() {
  // @@protoc_insertion_point(destructor:cvec)
  SharedDtor();
}

void cvec::SharedDtor() {
  v_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cvec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cvec& cvec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cvec_Vector_2eproto.base);
  return *internal_default_instance();
}


void cvec::Clear() {
// @@protoc_insertion_point(message_clear_start:cvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* cvec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_v();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cvec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cvec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cvec)
  return target;
}

size_t cvec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cvec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes v = 1;
  if (this->v().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cvec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cvec)
  GOOGLE_DCHECK_NE(&from, this);
  const cvec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cvec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cvec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cvec)
    MergeFrom(*source);
  }
}

void cvec::MergeFrom(const cvec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cvec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v().size() > 0) {

    v_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_);
  }
}

void cvec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cvec::CopyFrom(const cvec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cvec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cvec::IsInitialized() const {
  return true;
}

void cvec::InternalSwap(cvec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  v_.Swap(&other->v_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata cvec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec2::InitAsDefaultInstance() {
}
class vec2::_Internal {
 public:
};

vec2::vec2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec2)
}
vec2::vec2(const vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:vec2)
}

void vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

vec2::~vec2() {
  // @@protoc_insertion_point(destructor:vec2)
  SharedDtor();
}

void vec2::SharedDtor() {
}

void vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec2& vec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec2_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* vec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec2)
  return target;
}

size_t vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const vec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec2)
    MergeFrom(*source);
  }
}

void vec2::MergeFrom(const vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void vec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec2::CopyFrom(const vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec2::IsInitialized() const {
  return true;
}

void vec2::InternalSwap(vec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec2::InitAsDefaultInstance() {
}
class fvec2::_Internal {
 public:
};

fvec2::fvec2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec2)
}
fvec2::fvec2(const fvec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:fvec2)
}

void fvec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

fvec2::~fvec2() {
  // @@protoc_insertion_point(destructor:fvec2)
  SharedDtor();
}

void fvec2::SharedDtor() {
}

void fvec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec2& fvec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec2_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec2::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* fvec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec2)
  return target;
}

size_t fvec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec2)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec2)
    MergeFrom(*source);
  }
}

void fvec2::MergeFrom(const fvec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void fvec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec2::CopyFrom(const fvec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec2::IsInitialized() const {
  return true;
}

void fvec2::InternalSwap(fvec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec2::InitAsDefaultInstance() {
}
class ivec2::_Internal {
 public:
};

ivec2::ivec2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec2)
}
ivec2::ivec2(const ivec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ivec2)
}

void ivec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ivec2::~ivec2() {
  // @@protoc_insertion_point(destructor:ivec2)
  SharedDtor();
}

void ivec2::SharedDtor() {
}

void ivec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec2& ivec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec2_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec2::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* ivec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec2)
  return target;
}

size_t ivec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec2)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec2)
    MergeFrom(*source);
  }
}

void ivec2::MergeFrom(const ivec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void ivec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec2::CopyFrom(const ivec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec2::IsInitialized() const {
  return true;
}

void ivec2::InternalSwap(ivec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec2::InitAsDefaultInstance() {
}
class uvec2::_Internal {
 public:
};

uvec2::uvec2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec2)
}
uvec2::uvec2(const uvec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:uvec2)
}

void uvec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

uvec2::~uvec2() {
  // @@protoc_insertion_point(destructor:uvec2)
  SharedDtor();
}

void uvec2::SharedDtor() {
}

void uvec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec2& uvec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec2_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec2::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* uvec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec2)
  return target;
}

size_t uvec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec2)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec2)
    MergeFrom(*source);
  }
}

void uvec2::MergeFrom(const uvec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void uvec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec2::CopyFrom(const uvec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec2::IsInitialized() const {
  return true;
}

void uvec2::InternalSwap(uvec2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec3::InitAsDefaultInstance() {
}
class vec3::_Internal {
 public:
};

vec3::vec3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec3)
}
vec3::vec3(const vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:vec3)
}

void vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

vec3::~vec3() {
  // @@protoc_insertion_point(destructor:vec3)
  SharedDtor();
}

void vec3::SharedDtor() {
}

void vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec3& vec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec3_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec3)
  return target;
}

size_t vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec3)
    MergeFrom(*source);
  }
}

void vec3::MergeFrom(const vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec3::CopyFrom(const vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec3::IsInitialized() const {
  return true;
}

void vec3::InternalSwap(vec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec3::InitAsDefaultInstance() {
}
class fvec3::_Internal {
 public:
};

fvec3::fvec3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec3)
}
fvec3::fvec3(const fvec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:fvec3)
}

void fvec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

fvec3::~fvec3() {
  // @@protoc_insertion_point(destructor:fvec3)
  SharedDtor();
}

void fvec3::SharedDtor() {
}

void fvec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec3& fvec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec3_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec3::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* fvec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec3)
  return target;
}

size_t fvec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec3)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec3)
    MergeFrom(*source);
  }
}

void fvec3::MergeFrom(const fvec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void fvec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec3::CopyFrom(const fvec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec3::IsInitialized() const {
  return true;
}

void fvec3::InternalSwap(fvec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec3::InitAsDefaultInstance() {
}
class ivec3::_Internal {
 public:
};

ivec3::ivec3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec3)
}
ivec3::ivec3(const ivec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:ivec3)
}

void ivec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

ivec3::~ivec3() {
  // @@protoc_insertion_point(destructor:ivec3)
  SharedDtor();
}

void ivec3::SharedDtor() {
}

void ivec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec3& ivec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec3_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec3::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* ivec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  // sint32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec3)
  return target;
}

size_t ivec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  // sint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec3)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec3)
    MergeFrom(*source);
  }
}

void ivec3::MergeFrom(const ivec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
}

void ivec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec3::CopyFrom(const ivec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec3::IsInitialized() const {
  return true;
}

void ivec3::InternalSwap(ivec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec3::InitAsDefaultInstance() {
}
class uvec3::_Internal {
 public:
};

uvec3::uvec3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec3)
}
uvec3::uvec3(const uvec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:uvec3)
}

void uvec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

uvec3::~uvec3() {
  // @@protoc_insertion_point(destructor:uvec3)
  SharedDtor();
}

void uvec3::SharedDtor() {
}

void uvec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec3& uvec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec3_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec3::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* uvec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec3)
  return target;
}

size_t uvec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_z());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec3)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec3)
    MergeFrom(*source);
  }
}

void uvec3::MergeFrom(const uvec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
}

void uvec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec3::CopyFrom(const uvec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec3::IsInitialized() const {
  return true;
}

void uvec3::InternalSwap(uvec3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec4::InitAsDefaultInstance() {
}
class vec4::_Internal {
 public:
};

vec4::vec4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec4)
}
vec4::vec4(const vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:vec4)
}

void vec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
}

vec4::~vec4() {
  // @@protoc_insertion_point(destructor:vec4)
  SharedDtor();
}

void vec4::SharedDtor() {
}

void vec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec4& vec4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec4_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

const char* vec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double t = 4;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec4)
  return target;
}

size_t vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double t = 4;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec4)
  GOOGLE_DCHECK_NE(&from, this);
  const vec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec4)
    MergeFrom(*source);
  }
}

void vec4::MergeFrom(const vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
}

void vec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec4::CopyFrom(const vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec4::IsInitialized() const {
  return true;
}

void vec4::InternalSwap(vec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec4::InitAsDefaultInstance() {
}
class fvec4::_Internal {
 public:
};

fvec4::fvec4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec4)
}
fvec4::fvec4(const fvec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:fvec4)
}

void fvec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
}

fvec4::~fvec4() {
  // @@protoc_insertion_point(destructor:fvec4)
  SharedDtor();
}

void fvec4::SharedDtor() {
}

void fvec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec4& fvec4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec4_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec4::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

const char* fvec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float t = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float t = 4;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec4)
  return target;
}

size_t fvec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float t = 4;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec4)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec4)
    MergeFrom(*source);
  }
}

void fvec4::MergeFrom(const fvec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
}

void fvec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec4::CopyFrom(const fvec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec4::IsInitialized() const {
  return true;
}

void fvec4::InternalSwap(fvec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec4::InitAsDefaultInstance() {
}
class ivec4::_Internal {
 public:
};

ivec4::ivec4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec4)
}
ivec4::ivec4(const ivec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:ivec4)
}

void ivec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
}

ivec4::~ivec4() {
  // @@protoc_insertion_point(destructor:ivec4)
  SharedDtor();
}

void ivec4::SharedDtor() {
}

void ivec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec4& ivec4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec4_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec4::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

const char* ivec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 t = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  // sint32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_z(), target);
  }

  // sint32 t = 4;
  if (this->t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec4)
  return target;
}

size_t ivec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_x());
  }

  // sint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_y());
  }

  // sint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_z());
  }

  // sint32 t = 4;
  if (this->t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_t());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec4)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec4)
    MergeFrom(*source);
  }
}

void ivec4::MergeFrom(const ivec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
  if (from.t() != 0) {
    _internal_set_t(from._internal_t());
  }
}

void ivec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec4::CopyFrom(const ivec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec4::IsInitialized() const {
  return true;
}

void ivec4::InternalSwap(ivec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec4::InitAsDefaultInstance() {
}
class uvec4::_Internal {
 public:
};

uvec4::uvec4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec4)
}
uvec4::uvec4(const uvec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:uvec4)
}

void uvec4::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
}

uvec4::~uvec4() {
  // @@protoc_insertion_point(destructor:uvec4)
  SharedDtor();
}

void uvec4::SharedDtor() {
}

void uvec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec4& uvec4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec4_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec4::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

const char* uvec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_z(), target);
  }

  // uint32 t = 4;
  if (this->t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec4)
  return target;
}

size_t uvec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  // uint32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_z());
  }

  // uint32 t = 4;
  if (this->t() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec4)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec4)
    MergeFrom(*source);
  }
}

void uvec4::MergeFrom(const uvec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.z() != 0) {
    _internal_set_z(from._internal_z());
  }
  if (from.t() != 0) {
    _internal_set_t(from._internal_t());
  }
}

void uvec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec4::CopyFrom(const uvec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec4::IsInitialized() const {
  return true;
}

void uvec4::InternalSwap(uvec4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec5::InitAsDefaultInstance() {
}
class vec5::_Internal {
 public:
};

vec5::vec5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec5)
}
vec5::vec5(const vec5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s4_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  // @@protoc_insertion_point(copy_constructor:vec5)
}

void vec5::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
}

vec5::~vec5() {
  // @@protoc_insertion_point(destructor:vec5)
  SharedDtor();
}

void vec5::SharedDtor() {
}

void vec5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec5& vec5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec5_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec5::Clear() {
// @@protoc_insertion_point(message_clear_start:vec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  _internal_metadata_.Clear();
}

const char* vec5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec5)
  return target;
}

size_t vec5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec5)
  GOOGLE_DCHECK_NE(&from, this);
  const vec5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec5)
    MergeFrom(*source);
  }
}

void vec5::MergeFrom(const vec5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
}

void vec5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec5::CopyFrom(const vec5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec5::IsInitialized() const {
  return true;
}

void vec5::InternalSwap(vec5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec5::InitAsDefaultInstance() {
}
class fvec5::_Internal {
 public:
};

fvec5::fvec5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec5)
}
fvec5::fvec5(const fvec5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s4_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  // @@protoc_insertion_point(copy_constructor:fvec5)
}

void fvec5::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
}

fvec5::~fvec5() {
  // @@protoc_insertion_point(destructor:fvec5)
  SharedDtor();
}

void fvec5::SharedDtor() {
}

void fvec5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec5& fvec5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec5_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec5::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  _internal_metadata_.Clear();
}

const char* fvec5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec5)
  return target;
}

size_t fvec5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec5)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec5)
    MergeFrom(*source);
  }
}

void fvec5::MergeFrom(const fvec5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
}

void fvec5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec5::CopyFrom(const fvec5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec5::IsInitialized() const {
  return true;
}

void fvec5::InternalSwap(fvec5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec5::InitAsDefaultInstance() {
}
class ivec5::_Internal {
 public:
};

ivec5::ivec5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec5)
}
ivec5::ivec5(const ivec5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s4_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  // @@protoc_insertion_point(copy_constructor:ivec5)
}

void ivec5::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
}

ivec5::~ivec5() {
  // @@protoc_insertion_point(destructor:ivec5)
  SharedDtor();
}

void ivec5::SharedDtor() {
}

void ivec5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec5& ivec5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec5_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec5::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  _internal_metadata_.Clear();
}

const char* ivec5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec5)
  return target;
}

size_t ivec5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec5)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec5)
    MergeFrom(*source);
  }
}

void ivec5::MergeFrom(const ivec5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
}

void ivec5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec5::CopyFrom(const ivec5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec5::IsInitialized() const {
  return true;
}

void ivec5::InternalSwap(ivec5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec5::InitAsDefaultInstance() {
}
class uvec5::_Internal {
 public:
};

uvec5::uvec5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec5)
}
uvec5::uvec5(const uvec5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s4_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  // @@protoc_insertion_point(copy_constructor:uvec5)
}

void uvec5::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
}

uvec5::~uvec5() {
  // @@protoc_insertion_point(destructor:uvec5)
  SharedDtor();
}

void uvec5::SharedDtor() {
}

void uvec5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec5& uvec5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec5_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec5::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s4_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s4_));
  _internal_metadata_.Clear();
}

const char* uvec5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec5)
  return target;
}

size_t uvec5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec5)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec5)
    MergeFrom(*source);
  }
}

void uvec5::MergeFrom(const uvec5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
}

void uvec5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec5::CopyFrom(const uvec5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec5::IsInitialized() const {
  return true;
}

void uvec5::InternalSwap(uvec5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec6::InitAsDefaultInstance() {
}
class vec6::_Internal {
 public:
};

vec6::vec6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec6)
}
vec6::vec6(const vec6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s5_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  // @@protoc_insertion_point(copy_constructor:vec6)
}

void vec6::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
}

vec6::~vec6() {
  // @@protoc_insertion_point(destructor:vec6)
  SharedDtor();
}

void vec6::SharedDtor() {
}

void vec6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec6& vec6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec6_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec6::Clear() {
// @@protoc_insertion_point(message_clear_start:vec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  _internal_metadata_.Clear();
}

const char* vec6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec6)
  return target;
}

size_t vec6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec6)
  GOOGLE_DCHECK_NE(&from, this);
  const vec6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec6)
    MergeFrom(*source);
  }
}

void vec6::MergeFrom(const vec6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
}

void vec6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec6::CopyFrom(const vec6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec6::IsInitialized() const {
  return true;
}

void vec6::InternalSwap(vec6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec6::InitAsDefaultInstance() {
}
class fvec6::_Internal {
 public:
};

fvec6::fvec6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec6)
}
fvec6::fvec6(const fvec6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s5_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  // @@protoc_insertion_point(copy_constructor:fvec6)
}

void fvec6::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
}

fvec6::~fvec6() {
  // @@protoc_insertion_point(destructor:fvec6)
  SharedDtor();
}

void fvec6::SharedDtor() {
}

void fvec6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec6& fvec6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec6_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec6::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  _internal_metadata_.Clear();
}

const char* fvec6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec6)
  return target;
}

size_t fvec6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec6)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec6)
    MergeFrom(*source);
  }
}

void fvec6::MergeFrom(const fvec6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
}

void fvec6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec6::CopyFrom(const fvec6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec6::IsInitialized() const {
  return true;
}

void fvec6::InternalSwap(fvec6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec6::InitAsDefaultInstance() {
}
class ivec6::_Internal {
 public:
};

ivec6::ivec6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec6)
}
ivec6::ivec6(const ivec6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s5_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  // @@protoc_insertion_point(copy_constructor:ivec6)
}

void ivec6::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
}

ivec6::~ivec6() {
  // @@protoc_insertion_point(destructor:ivec6)
  SharedDtor();
}

void ivec6::SharedDtor() {
}

void ivec6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec6& ivec6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec6_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec6::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  _internal_metadata_.Clear();
}

const char* ivec6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec6)
  return target;
}

size_t ivec6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec6)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec6)
    MergeFrom(*source);
  }
}

void ivec6::MergeFrom(const ivec6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
}

void ivec6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec6::CopyFrom(const ivec6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec6::IsInitialized() const {
  return true;
}

void ivec6::InternalSwap(ivec6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec6::InitAsDefaultInstance() {
}
class uvec6::_Internal {
 public:
};

uvec6::uvec6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec6)
}
uvec6::uvec6(const uvec6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s5_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  // @@protoc_insertion_point(copy_constructor:uvec6)
}

void uvec6::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
}

uvec6::~uvec6() {
  // @@protoc_insertion_point(destructor:uvec6)
  SharedDtor();
}

void uvec6::SharedDtor() {
}

void uvec6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec6& uvec6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec6_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec6::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s5_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s5_));
  _internal_metadata_.Clear();
}

const char* uvec6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec6)
  return target;
}

size_t uvec6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec6)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec6)
    MergeFrom(*source);
  }
}

void uvec6::MergeFrom(const uvec6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
}

void uvec6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec6::CopyFrom(const uvec6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec6::IsInitialized() const {
  return true;
}

void uvec6::InternalSwap(uvec6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec7::InitAsDefaultInstance() {
}
class vec7::_Internal {
 public:
};

vec7::vec7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec7)
}
vec7::vec7(const vec7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s6_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  // @@protoc_insertion_point(copy_constructor:vec7)
}

void vec7::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
}

vec7::~vec7() {
  // @@protoc_insertion_point(destructor:vec7)
  SharedDtor();
}

void vec7::SharedDtor() {
}

void vec7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec7& vec7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec7_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec7::Clear() {
// @@protoc_insertion_point(message_clear_start:vec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  _internal_metadata_.Clear();
}

const char* vec7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec7)
  return target;
}

size_t vec7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec7)
  GOOGLE_DCHECK_NE(&from, this);
  const vec7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec7)
    MergeFrom(*source);
  }
}

void vec7::MergeFrom(const vec7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
}

void vec7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec7::CopyFrom(const vec7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec7::IsInitialized() const {
  return true;
}

void vec7::InternalSwap(vec7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec7::InitAsDefaultInstance() {
}
class fvec7::_Internal {
 public:
};

fvec7::fvec7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec7)
}
fvec7::fvec7(const fvec7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s6_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  // @@protoc_insertion_point(copy_constructor:fvec7)
}

void fvec7::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
}

fvec7::~fvec7() {
  // @@protoc_insertion_point(destructor:fvec7)
  SharedDtor();
}

void fvec7::SharedDtor() {
}

void fvec7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec7& fvec7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec7_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec7::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  _internal_metadata_.Clear();
}

const char* fvec7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec7)
  return target;
}

size_t fvec7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec7)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec7)
    MergeFrom(*source);
  }
}

void fvec7::MergeFrom(const fvec7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
}

void fvec7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec7::CopyFrom(const fvec7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec7::IsInitialized() const {
  return true;
}

void fvec7::InternalSwap(fvec7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec7::InitAsDefaultInstance() {
}
class ivec7::_Internal {
 public:
};

ivec7::ivec7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec7)
}
ivec7::ivec7(const ivec7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s6_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  // @@protoc_insertion_point(copy_constructor:ivec7)
}

void ivec7::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
}

ivec7::~ivec7() {
  // @@protoc_insertion_point(destructor:ivec7)
  SharedDtor();
}

void ivec7::SharedDtor() {
}

void ivec7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec7& ivec7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec7_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec7::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  _internal_metadata_.Clear();
}

const char* ivec7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec7)
  return target;
}

size_t ivec7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec7)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec7)
    MergeFrom(*source);
  }
}

void ivec7::MergeFrom(const ivec7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
}

void ivec7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec7::CopyFrom(const ivec7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec7::IsInitialized() const {
  return true;
}

void ivec7::InternalSwap(ivec7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec7::InitAsDefaultInstance() {
}
class uvec7::_Internal {
 public:
};

uvec7::uvec7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec7)
}
uvec7::uvec7(const uvec7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s6_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  // @@protoc_insertion_point(copy_constructor:uvec7)
}

void uvec7::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
}

uvec7::~uvec7() {
  // @@protoc_insertion_point(destructor:uvec7)
  SharedDtor();
}

void uvec7::SharedDtor() {
}

void uvec7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec7& uvec7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec7_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec7::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s6_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s6_));
  _internal_metadata_.Clear();
}

const char* uvec7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec7)
  return target;
}

size_t uvec7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec7)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec7)
    MergeFrom(*source);
  }
}

void uvec7::MergeFrom(const uvec7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
}

void uvec7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec7::CopyFrom(const uvec7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec7::IsInitialized() const {
  return true;
}

void uvec7::InternalSwap(uvec7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec8::InitAsDefaultInstance() {
}
class vec8::_Internal {
 public:
};

vec8::vec8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec8)
}
vec8::vec8(const vec8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s7_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  // @@protoc_insertion_point(copy_constructor:vec8)
}

void vec8::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
}

vec8::~vec8() {
  // @@protoc_insertion_point(destructor:vec8)
  SharedDtor();
}

void vec8::SharedDtor() {
}

void vec8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec8& vec8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec8_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec8::Clear() {
// @@protoc_insertion_point(message_clear_start:vec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  _internal_metadata_.Clear();
}

const char* vec8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec8)
  return target;
}

size_t vec8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec8)
  GOOGLE_DCHECK_NE(&from, this);
  const vec8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec8)
    MergeFrom(*source);
  }
}

void vec8::MergeFrom(const vec8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
}

void vec8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec8::CopyFrom(const vec8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec8::IsInitialized() const {
  return true;
}

void vec8::InternalSwap(vec8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec8::InitAsDefaultInstance() {
}
class fvec8::_Internal {
 public:
};

fvec8::fvec8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec8)
}
fvec8::fvec8(const fvec8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s7_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  // @@protoc_insertion_point(copy_constructor:fvec8)
}

void fvec8::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
}

fvec8::~fvec8() {
  // @@protoc_insertion_point(destructor:fvec8)
  SharedDtor();
}

void fvec8::SharedDtor() {
}

void fvec8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec8& fvec8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec8_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec8::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  _internal_metadata_.Clear();
}

const char* fvec8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec8)
  return target;
}

size_t fvec8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec8)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec8)
    MergeFrom(*source);
  }
}

void fvec8::MergeFrom(const fvec8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
}

void fvec8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec8::CopyFrom(const fvec8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec8::IsInitialized() const {
  return true;
}

void fvec8::InternalSwap(fvec8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec8::InitAsDefaultInstance() {
}
class ivec8::_Internal {
 public:
};

ivec8::ivec8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec8)
}
ivec8::ivec8(const ivec8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s7_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  // @@protoc_insertion_point(copy_constructor:ivec8)
}

void ivec8::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
}

ivec8::~ivec8() {
  // @@protoc_insertion_point(destructor:ivec8)
  SharedDtor();
}

void ivec8::SharedDtor() {
}

void ivec8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec8& ivec8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec8_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec8::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  _internal_metadata_.Clear();
}

const char* ivec8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec8)
  return target;
}

size_t ivec8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec8)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec8)
    MergeFrom(*source);
  }
}

void ivec8::MergeFrom(const ivec8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
}

void ivec8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec8::CopyFrom(const ivec8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec8::IsInitialized() const {
  return true;
}

void ivec8::InternalSwap(ivec8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec8::InitAsDefaultInstance() {
}
class uvec8::_Internal {
 public:
};

uvec8::uvec8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec8)
}
uvec8::uvec8(const uvec8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s7_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  // @@protoc_insertion_point(copy_constructor:uvec8)
}

void uvec8::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
}

uvec8::~uvec8() {
  // @@protoc_insertion_point(destructor:uvec8)
  SharedDtor();
}

void uvec8::SharedDtor() {
}

void uvec8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec8& uvec8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec8_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec8::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s7_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s7_));
  _internal_metadata_.Clear();
}

const char* uvec8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec8)
  return target;
}

size_t uvec8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec8)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec8)
    MergeFrom(*source);
  }
}

void uvec8::MergeFrom(const uvec8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
}

void uvec8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec8::CopyFrom(const uvec8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec8::IsInitialized() const {
  return true;
}

void uvec8::InternalSwap(uvec8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec9::InitAsDefaultInstance() {
}
class vec9::_Internal {
 public:
};

vec9::vec9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec9)
}
vec9::vec9(const vec9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s8_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  // @@protoc_insertion_point(copy_constructor:vec9)
}

void vec9::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
}

vec9::~vec9() {
  // @@protoc_insertion_point(destructor:vec9)
  SharedDtor();
}

void vec9::SharedDtor() {
}

void vec9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec9& vec9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec9_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec9::Clear() {
// @@protoc_insertion_point(message_clear_start:vec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  _internal_metadata_.Clear();
}

const char* vec9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec9)
  return target;
}

size_t vec9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec9)
  GOOGLE_DCHECK_NE(&from, this);
  const vec9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec9)
    MergeFrom(*source);
  }
}

void vec9::MergeFrom(const vec9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
}

void vec9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec9::CopyFrom(const vec9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec9::IsInitialized() const {
  return true;
}

void vec9::InternalSwap(vec9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec9::InitAsDefaultInstance() {
}
class fvec9::_Internal {
 public:
};

fvec9::fvec9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec9)
}
fvec9::fvec9(const fvec9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s8_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  // @@protoc_insertion_point(copy_constructor:fvec9)
}

void fvec9::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
}

fvec9::~fvec9() {
  // @@protoc_insertion_point(destructor:fvec9)
  SharedDtor();
}

void fvec9::SharedDtor() {
}

void fvec9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec9& fvec9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec9_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec9::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  _internal_metadata_.Clear();
}

const char* fvec9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec9)
  return target;
}

size_t fvec9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec9)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec9)
    MergeFrom(*source);
  }
}

void fvec9::MergeFrom(const fvec9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
}

void fvec9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec9::CopyFrom(const fvec9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec9::IsInitialized() const {
  return true;
}

void fvec9::InternalSwap(fvec9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec9::InitAsDefaultInstance() {
}
class ivec9::_Internal {
 public:
};

ivec9::ivec9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec9)
}
ivec9::ivec9(const ivec9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s8_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  // @@protoc_insertion_point(copy_constructor:ivec9)
}

void ivec9::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
}

ivec9::~ivec9() {
  // @@protoc_insertion_point(destructor:ivec9)
  SharedDtor();
}

void ivec9::SharedDtor() {
}

void ivec9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec9& ivec9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec9_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec9::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  _internal_metadata_.Clear();
}

const char* ivec9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec9)
  return target;
}

size_t ivec9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec9)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec9)
    MergeFrom(*source);
  }
}

void ivec9::MergeFrom(const ivec9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
}

void ivec9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec9::CopyFrom(const ivec9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec9::IsInitialized() const {
  return true;
}

void ivec9::InternalSwap(ivec9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec9::InitAsDefaultInstance() {
}
class uvec9::_Internal {
 public:
};

uvec9::uvec9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec9)
}
uvec9::uvec9(const uvec9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s8_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  // @@protoc_insertion_point(copy_constructor:uvec9)
}

void uvec9::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
}

uvec9::~uvec9() {
  // @@protoc_insertion_point(destructor:uvec9)
  SharedDtor();
}

void uvec9::SharedDtor() {
}

void uvec9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec9& uvec9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec9_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec9::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s8_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s8_));
  _internal_metadata_.Clear();
}

const char* uvec9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec9)
  return target;
}

size_t uvec9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec9)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec9)
    MergeFrom(*source);
  }
}

void uvec9::MergeFrom(const uvec9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
}

void uvec9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec9::CopyFrom(const uvec9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec9::IsInitialized() const {
  return true;
}

void uvec9::InternalSwap(uvec9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec10::InitAsDefaultInstance() {
}
class vec10::_Internal {
 public:
};

vec10::vec10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec10)
}
vec10::vec10(const vec10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s9_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  // @@protoc_insertion_point(copy_constructor:vec10)
}

void vec10::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
}

vec10::~vec10() {
  // @@protoc_insertion_point(destructor:vec10)
  SharedDtor();
}

void vec10::SharedDtor() {
}

void vec10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec10& vec10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec10_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec10::Clear() {
// @@protoc_insertion_point(message_clear_start:vec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  _internal_metadata_.Clear();
}

const char* vec10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec10)
  return target;
}

size_t vec10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec10)
  GOOGLE_DCHECK_NE(&from, this);
  const vec10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec10)
    MergeFrom(*source);
  }
}

void vec10::MergeFrom(const vec10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
}

void vec10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec10::CopyFrom(const vec10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec10::IsInitialized() const {
  return true;
}

void vec10::InternalSwap(vec10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec10::InitAsDefaultInstance() {
}
class fvec10::_Internal {
 public:
};

fvec10::fvec10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec10)
}
fvec10::fvec10(const fvec10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s9_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  // @@protoc_insertion_point(copy_constructor:fvec10)
}

void fvec10::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
}

fvec10::~fvec10() {
  // @@protoc_insertion_point(destructor:fvec10)
  SharedDtor();
}

void fvec10::SharedDtor() {
}

void fvec10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec10& fvec10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec10_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec10::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  _internal_metadata_.Clear();
}

const char* fvec10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec10)
  return target;
}

size_t fvec10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec10)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec10)
    MergeFrom(*source);
  }
}

void fvec10::MergeFrom(const fvec10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
}

void fvec10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec10::CopyFrom(const fvec10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec10::IsInitialized() const {
  return true;
}

void fvec10::InternalSwap(fvec10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec10::InitAsDefaultInstance() {
}
class ivec10::_Internal {
 public:
};

ivec10::ivec10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec10)
}
ivec10::ivec10(const ivec10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s9_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  // @@protoc_insertion_point(copy_constructor:ivec10)
}

void ivec10::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
}

ivec10::~ivec10() {
  // @@protoc_insertion_point(destructor:ivec10)
  SharedDtor();
}

void ivec10::SharedDtor() {
}

void ivec10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec10& ivec10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec10_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec10::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  _internal_metadata_.Clear();
}

const char* ivec10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec10)
  return target;
}

size_t ivec10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec10)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec10)
    MergeFrom(*source);
  }
}

void ivec10::MergeFrom(const ivec10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
}

void ivec10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec10::CopyFrom(const ivec10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec10::IsInitialized() const {
  return true;
}

void ivec10::InternalSwap(ivec10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec10::InitAsDefaultInstance() {
}
class uvec10::_Internal {
 public:
};

uvec10::uvec10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec10)
}
uvec10::uvec10(const uvec10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&s9_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  // @@protoc_insertion_point(copy_constructor:uvec10)
}

void uvec10::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
}

uvec10::~uvec10() {
  // @@protoc_insertion_point(destructor:uvec10)
  SharedDtor();
}

void uvec10::SharedDtor() {
}

void uvec10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec10& uvec10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec10_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec10::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s9_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(s9_));
  _internal_metadata_.Clear();
}

const char* uvec10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec10)
  return target;
}

size_t uvec10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec10)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec10)
    MergeFrom(*source);
  }
}

void uvec10::MergeFrom(const uvec10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
}

void uvec10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec10::CopyFrom(const uvec10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec10::IsInitialized() const {
  return true;
}

void uvec10::InternalSwap(uvec10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec11::InitAsDefaultInstance() {
}
class vec11::_Internal {
 public:
};

vec11::vec11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec11)
}
vec11::vec11(const vec11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sa_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  // @@protoc_insertion_point(copy_constructor:vec11)
}

void vec11::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
}

vec11::~vec11() {
  // @@protoc_insertion_point(destructor:vec11)
  SharedDtor();
}

void vec11::SharedDtor() {
}

void vec11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec11& vec11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec11_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec11::Clear() {
// @@protoc_insertion_point(message_clear_start:vec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  _internal_metadata_.Clear();
}

const char* vec11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec11)
  return target;
}

size_t vec11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec11)
  GOOGLE_DCHECK_NE(&from, this);
  const vec11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec11)
    MergeFrom(*source);
  }
}

void vec11::MergeFrom(const vec11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
}

void vec11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec11::CopyFrom(const vec11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec11::IsInitialized() const {
  return true;
}

void vec11::InternalSwap(vec11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec11::InitAsDefaultInstance() {
}
class fvec11::_Internal {
 public:
};

fvec11::fvec11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec11)
}
fvec11::fvec11(const fvec11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sa_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  // @@protoc_insertion_point(copy_constructor:fvec11)
}

void fvec11::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
}

fvec11::~fvec11() {
  // @@protoc_insertion_point(destructor:fvec11)
  SharedDtor();
}

void fvec11::SharedDtor() {
}

void fvec11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec11& fvec11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec11_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec11::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  _internal_metadata_.Clear();
}

const char* fvec11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec11)
  return target;
}

size_t fvec11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec11)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec11)
    MergeFrom(*source);
  }
}

void fvec11::MergeFrom(const fvec11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
}

void fvec11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec11::CopyFrom(const fvec11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec11::IsInitialized() const {
  return true;
}

void fvec11::InternalSwap(fvec11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec11::InitAsDefaultInstance() {
}
class ivec11::_Internal {
 public:
};

ivec11::ivec11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec11)
}
ivec11::ivec11(const ivec11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sa_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  // @@protoc_insertion_point(copy_constructor:ivec11)
}

void ivec11::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
}

ivec11::~ivec11() {
  // @@protoc_insertion_point(destructor:ivec11)
  SharedDtor();
}

void ivec11::SharedDtor() {
}

void ivec11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec11& ivec11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec11_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec11::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  _internal_metadata_.Clear();
}

const char* ivec11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec11)
  return target;
}

size_t ivec11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec11)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec11)
    MergeFrom(*source);
  }
}

void ivec11::MergeFrom(const ivec11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
}

void ivec11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec11::CopyFrom(const ivec11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec11::IsInitialized() const {
  return true;
}

void ivec11::InternalSwap(ivec11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec11::InitAsDefaultInstance() {
}
class uvec11::_Internal {
 public:
};

uvec11::uvec11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec11)
}
uvec11::uvec11(const uvec11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sa_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  // @@protoc_insertion_point(copy_constructor:uvec11)
}

void uvec11::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
}

uvec11::~uvec11() {
  // @@protoc_insertion_point(destructor:uvec11)
  SharedDtor();
}

void uvec11::SharedDtor() {
}

void uvec11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec11& uvec11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec11_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec11::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sa_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sa_));
  _internal_metadata_.Clear();
}

const char* uvec11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec11)
  return target;
}

size_t uvec11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec11)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec11)
    MergeFrom(*source);
  }
}

void uvec11::MergeFrom(const uvec11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
}

void uvec11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec11::CopyFrom(const uvec11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec11::IsInitialized() const {
  return true;
}

void uvec11::InternalSwap(uvec11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec12::InitAsDefaultInstance() {
}
class vec12::_Internal {
 public:
};

vec12::vec12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec12)
}
vec12::vec12(const vec12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  // @@protoc_insertion_point(copy_constructor:vec12)
}

void vec12::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
}

vec12::~vec12() {
  // @@protoc_insertion_point(destructor:vec12)
  SharedDtor();
}

void vec12::SharedDtor() {
}

void vec12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec12& vec12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec12_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec12::Clear() {
// @@protoc_insertion_point(message_clear_start:vec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  _internal_metadata_.Clear();
}

const char* vec12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec12)
  return target;
}

size_t vec12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec12)
  GOOGLE_DCHECK_NE(&from, this);
  const vec12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec12)
    MergeFrom(*source);
  }
}

void vec12::MergeFrom(const vec12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
}

void vec12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec12::CopyFrom(const vec12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec12::IsInitialized() const {
  return true;
}

void vec12::InternalSwap(vec12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec12::InitAsDefaultInstance() {
}
class fvec12::_Internal {
 public:
};

fvec12::fvec12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec12)
}
fvec12::fvec12(const fvec12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  // @@protoc_insertion_point(copy_constructor:fvec12)
}

void fvec12::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
}

fvec12::~fvec12() {
  // @@protoc_insertion_point(destructor:fvec12)
  SharedDtor();
}

void fvec12::SharedDtor() {
}

void fvec12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec12& fvec12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec12_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec12::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  _internal_metadata_.Clear();
}

const char* fvec12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec12)
  return target;
}

size_t fvec12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec12)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec12)
    MergeFrom(*source);
  }
}

void fvec12::MergeFrom(const fvec12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
}

void fvec12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec12::CopyFrom(const fvec12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec12::IsInitialized() const {
  return true;
}

void fvec12::InternalSwap(fvec12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec12::InitAsDefaultInstance() {
}
class ivec12::_Internal {
 public:
};

ivec12::ivec12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec12)
}
ivec12::ivec12(const ivec12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  // @@protoc_insertion_point(copy_constructor:ivec12)
}

void ivec12::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
}

ivec12::~ivec12() {
  // @@protoc_insertion_point(destructor:ivec12)
  SharedDtor();
}

void ivec12::SharedDtor() {
}

void ivec12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec12& ivec12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec12_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec12::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  _internal_metadata_.Clear();
}

const char* ivec12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_sb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec12)
  return target;
}

size_t ivec12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec12)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec12)
    MergeFrom(*source);
  }
}

void ivec12::MergeFrom(const ivec12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
}

void ivec12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec12::CopyFrom(const ivec12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec12::IsInitialized() const {
  return true;
}

void ivec12::InternalSwap(ivec12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec12::InitAsDefaultInstance() {
}
class uvec12::_Internal {
 public:
};

uvec12::uvec12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec12)
}
uvec12::uvec12(const uvec12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  // @@protoc_insertion_point(copy_constructor:uvec12)
}

void uvec12::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
}

uvec12::~uvec12() {
  // @@protoc_insertion_point(destructor:uvec12)
  SharedDtor();
}

void uvec12::SharedDtor() {
}

void uvec12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec12& uvec12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec12_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec12::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sb_));
  _internal_metadata_.Clear();
}

const char* uvec12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec12)
  return target;
}

size_t uvec12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec12)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec12)
    MergeFrom(*source);
  }
}

void uvec12::MergeFrom(const uvec12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
}

void uvec12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec12::CopyFrom(const uvec12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec12::IsInitialized() const {
  return true;
}

void uvec12::InternalSwap(uvec12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec13::InitAsDefaultInstance() {
}
class vec13::_Internal {
 public:
};

vec13::vec13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec13)
}
vec13::vec13(const vec13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sc_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  // @@protoc_insertion_point(copy_constructor:vec13)
}

void vec13::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
}

vec13::~vec13() {
  // @@protoc_insertion_point(destructor:vec13)
  SharedDtor();
}

void vec13::SharedDtor() {
}

void vec13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec13& vec13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec13_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec13::Clear() {
// @@protoc_insertion_point(message_clear_start:vec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  _internal_metadata_.Clear();
}

const char* vec13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sb(), target);
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec13)
  return target;
}

size_t vec13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 8;
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec13)
  GOOGLE_DCHECK_NE(&from, this);
  const vec13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec13)
    MergeFrom(*source);
  }
}

void vec13::MergeFrom(const vec13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
}

void vec13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec13::CopyFrom(const vec13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec13::IsInitialized() const {
  return true;
}

void vec13::InternalSwap(vec13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec13::InitAsDefaultInstance() {
}
class fvec13::_Internal {
 public:
};

fvec13::fvec13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec13)
}
fvec13::fvec13(const fvec13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sc_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  // @@protoc_insertion_point(copy_constructor:fvec13)
}

void fvec13::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
}

fvec13::~fvec13() {
  // @@protoc_insertion_point(destructor:fvec13)
  SharedDtor();
}

void fvec13::SharedDtor() {
}

void fvec13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec13& fvec13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec13_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec13::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  _internal_metadata_.Clear();
}

const char* fvec13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sb(), target);
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_sc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec13)
  return target;
}

size_t fvec13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 4;
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec13)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec13)
    MergeFrom(*source);
  }
}

void fvec13::MergeFrom(const fvec13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
}

void fvec13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec13::CopyFrom(const fvec13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec13::IsInitialized() const {
  return true;
}

void fvec13::InternalSwap(fvec13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec13::InitAsDefaultInstance() {
}
class ivec13::_Internal {
 public:
};

ivec13::ivec13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec13)
}
ivec13::ivec13(const ivec13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sc_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  // @@protoc_insertion_point(copy_constructor:ivec13)
}

void ivec13::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
}

ivec13::~ivec13() {
  // @@protoc_insertion_point(destructor:ivec13)
  SharedDtor();
}

void ivec13::SharedDtor() {
}

void ivec13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec13& ivec13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec13_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec13::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  _internal_metadata_.Clear();
}

const char* ivec13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_sb(), target);
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_sc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec13)
  return target;
}

size_t ivec13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sb());
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec13)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec13)
    MergeFrom(*source);
  }
}

void ivec13::MergeFrom(const ivec13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
}

void ivec13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec13::CopyFrom(const ivec13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec13::IsInitialized() const {
  return true;
}

void ivec13::InternalSwap(ivec13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec13::InitAsDefaultInstance() {
}
class uvec13::_Internal {
 public:
};

uvec13::uvec13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec13)
}
uvec13::uvec13(const uvec13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sc_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  // @@protoc_insertion_point(copy_constructor:uvec13)
}

void uvec13::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
}

uvec13::~uvec13() {
  // @@protoc_insertion_point(destructor:uvec13)
  SharedDtor();
}

void uvec13::SharedDtor() {
}

void uvec13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec13& uvec13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec13_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec13::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sc_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sc_));
  _internal_metadata_.Clear();
}

const char* uvec13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sb(), target);
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec13)
  return target;
}

size_t uvec13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sb());
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec13)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec13)
    MergeFrom(*source);
  }
}

void uvec13::MergeFrom(const uvec13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
}

void uvec13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec13::CopyFrom(const uvec13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec13::IsInitialized() const {
  return true;
}

void uvec13::InternalSwap(uvec13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec14::InitAsDefaultInstance() {
}
class vec14::_Internal {
 public:
};

vec14::vec14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec14)
}
vec14::vec14(const vec14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sd_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  // @@protoc_insertion_point(copy_constructor:vec14)
}

void vec14::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
}

vec14::~vec14() {
  // @@protoc_insertion_point(destructor:vec14)
  SharedDtor();
}

void vec14::SharedDtor() {
}

void vec14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec14& vec14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec14_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec14::Clear() {
// @@protoc_insertion_point(message_clear_start:vec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  _internal_metadata_.Clear();
}

const char* vec14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sb(), target);
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sc(), target);
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec14)
  return target;
}

size_t vec14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 8;
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 8;
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec14)
  GOOGLE_DCHECK_NE(&from, this);
  const vec14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec14)
    MergeFrom(*source);
  }
}

void vec14::MergeFrom(const vec14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
}

void vec14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec14::CopyFrom(const vec14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec14::IsInitialized() const {
  return true;
}

void vec14::InternalSwap(vec14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec14::InitAsDefaultInstance() {
}
class fvec14::_Internal {
 public:
};

fvec14::fvec14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec14)
}
fvec14::fvec14(const fvec14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sd_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  // @@protoc_insertion_point(copy_constructor:fvec14)
}

void fvec14::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
}

fvec14::~fvec14() {
  // @@protoc_insertion_point(destructor:fvec14)
  SharedDtor();
}

void fvec14::SharedDtor() {
}

void fvec14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec14& fvec14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec14_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec14::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  _internal_metadata_.Clear();
}

const char* fvec14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sb(), target);
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_sc(), target);
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_sd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec14)
  return target;
}

size_t fvec14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 4;
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 4;
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec14)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec14)
    MergeFrom(*source);
  }
}

void fvec14::MergeFrom(const fvec14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
}

void fvec14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec14::CopyFrom(const fvec14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec14::IsInitialized() const {
  return true;
}

void fvec14::InternalSwap(fvec14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec14::InitAsDefaultInstance() {
}
class ivec14::_Internal {
 public:
};

ivec14::ivec14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec14)
}
ivec14::ivec14(const ivec14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sd_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  // @@protoc_insertion_point(copy_constructor:ivec14)
}

void ivec14::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
}

ivec14::~ivec14() {
  // @@protoc_insertion_point(destructor:ivec14)
  SharedDtor();
}

void ivec14::SharedDtor() {
}

void ivec14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec14& ivec14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec14_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec14::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  _internal_metadata_.Clear();
}

const char* ivec14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_sb(), target);
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_sc(), target);
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->_internal_sd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec14)
  return target;
}

size_t ivec14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sb());
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sc());
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec14)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec14)
    MergeFrom(*source);
  }
}

void ivec14::MergeFrom(const ivec14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
}

void ivec14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec14::CopyFrom(const ivec14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec14::IsInitialized() const {
  return true;
}

void ivec14::InternalSwap(ivec14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec14::InitAsDefaultInstance() {
}
class uvec14::_Internal {
 public:
};

uvec14::uvec14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec14)
}
uvec14::uvec14(const uvec14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sd_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  // @@protoc_insertion_point(copy_constructor:uvec14)
}

void uvec14::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
}

uvec14::~uvec14() {
  // @@protoc_insertion_point(destructor:uvec14)
  SharedDtor();
}

void uvec14::SharedDtor() {
}

void uvec14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec14& uvec14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec14_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec14::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sd_));
  _internal_metadata_.Clear();
}

const char* uvec14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sb(), target);
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sc(), target);
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_sd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec14)
  return target;
}

size_t uvec14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sb());
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sc());
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec14)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec14)
    MergeFrom(*source);
  }
}

void uvec14::MergeFrom(const uvec14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
}

void uvec14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec14::CopyFrom(const uvec14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec14::IsInitialized() const {
  return true;
}

void uvec14::InternalSwap(uvec14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec15::InitAsDefaultInstance() {
}
class vec15::_Internal {
 public:
};

vec15::vec15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec15)
}
vec15::vec15(const vec15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&se_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  // @@protoc_insertion_point(copy_constructor:vec15)
}

void vec15::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
}

vec15::~vec15() {
  // @@protoc_insertion_point(destructor:vec15)
  SharedDtor();
}

void vec15::SharedDtor() {
}

void vec15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec15& vec15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec15_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec15::Clear() {
// @@protoc_insertion_point(message_clear_start:vec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  _internal_metadata_.Clear();
}

const char* vec15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sb(), target);
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sc(), target);
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sd(), target);
  }

  // double se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_se(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec15)
  return target;
}

size_t vec15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 8;
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 8;
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 8;
  }

  // double se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec15)
  GOOGLE_DCHECK_NE(&from, this);
  const vec15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec15)
    MergeFrom(*source);
  }
}

void vec15::MergeFrom(const vec15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
  if (!(from.se() <= 0 && from.se() >= 0)) {
    _internal_set_se(from._internal_se());
  }
}

void vec15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec15::CopyFrom(const vec15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec15::IsInitialized() const {
  return true;
}

void vec15::InternalSwap(vec15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec15::InitAsDefaultInstance() {
}
class fvec15::_Internal {
 public:
};

fvec15::fvec15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec15)
}
fvec15::fvec15(const fvec15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&se_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  // @@protoc_insertion_point(copy_constructor:fvec15)
}

void fvec15::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
}

fvec15::~fvec15() {
  // @@protoc_insertion_point(destructor:fvec15)
  SharedDtor();
}

void fvec15::SharedDtor() {
}

void fvec15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec15& fvec15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec15_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec15::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  _internal_metadata_.Clear();
}

const char* fvec15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sb(), target);
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_sc(), target);
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_sd(), target);
  }

  // float se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_se(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec15)
  return target;
}

size_t fvec15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 4;
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 4;
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 4;
  }

  // float se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec15)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec15)
    MergeFrom(*source);
  }
}

void fvec15::MergeFrom(const fvec15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
  if (!(from.se() <= 0 && from.se() >= 0)) {
    _internal_set_se(from._internal_se());
  }
}

void fvec15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec15::CopyFrom(const fvec15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec15::IsInitialized() const {
  return true;
}

void fvec15::InternalSwap(fvec15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec15::InitAsDefaultInstance() {
}
class ivec15::_Internal {
 public:
};

ivec15::ivec15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec15)
}
ivec15::ivec15(const ivec15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&se_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  // @@protoc_insertion_point(copy_constructor:ivec15)
}

void ivec15::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
}

ivec15::~ivec15() {
  // @@protoc_insertion_point(destructor:ivec15)
  SharedDtor();
}

void ivec15::SharedDtor() {
}

void ivec15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec15& ivec15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec15_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec15::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  _internal_metadata_.Clear();
}

const char* ivec15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_sb(), target);
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_sc(), target);
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->_internal_sd(), target);
  }

  // sint32 se = 15;
  if (this->se() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(15, this->_internal_se(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec15)
  return target;
}

size_t ivec15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sb());
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sc());
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sd());
  }

  // sint32 se = 15;
  if (this->se() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_se());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec15)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec15)
    MergeFrom(*source);
  }
}

void ivec15::MergeFrom(const ivec15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
  if (from.se() != 0) {
    _internal_set_se(from._internal_se());
  }
}

void ivec15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec15::CopyFrom(const ivec15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec15::IsInitialized() const {
  return true;
}

void ivec15::InternalSwap(ivec15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec15::InitAsDefaultInstance() {
}
class uvec15::_Internal {
 public:
};

uvec15::uvec15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec15)
}
uvec15::uvec15(const uvec15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&se_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  // @@protoc_insertion_point(copy_constructor:uvec15)
}

void uvec15::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
}

uvec15::~uvec15() {
  // @@protoc_insertion_point(destructor:uvec15)
  SharedDtor();
}

void uvec15::SharedDtor() {
}

void uvec15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec15& uvec15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec15_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec15::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&se_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(se_));
  _internal_metadata_.Clear();
}

const char* uvec15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sb(), target);
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sc(), target);
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_sd(), target);
  }

  // uint32 se = 15;
  if (this->se() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_se(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec15)
  return target;
}

size_t uvec15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sb());
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sc());
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sd());
  }

  // uint32 se = 15;
  if (this->se() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_se());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec15)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec15)
    MergeFrom(*source);
  }
}

void uvec15::MergeFrom(const uvec15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
  if (from.se() != 0) {
    _internal_set_se(from._internal_se());
  }
}

void uvec15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec15::CopyFrom(const uvec15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec15::IsInitialized() const {
  return true;
}

void uvec15::InternalSwap(uvec15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void vec16::InitAsDefaultInstance() {
}
class vec16::_Internal {
 public:
};

vec16::vec16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vec16)
}
vec16::vec16(const vec16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sf_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  // @@protoc_insertion_point(copy_constructor:vec16)
}

void vec16::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
}

vec16::~vec16() {
  // @@protoc_insertion_point(destructor:vec16)
  SharedDtor();
}

void vec16::SharedDtor() {
}

void vec16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const vec16& vec16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_vec16_Vector_2eproto.base);
  return *internal_default_instance();
}


void vec16::Clear() {
// @@protoc_insertion_point(message_clear_start:vec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  _internal_metadata_.Clear();
}

const char* vec16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vec16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s0(), target);
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s1(), target);
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s2(), target);
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s3(), target);
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_s4(), target);
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s5(), target);
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s6(), target);
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_s7(), target);
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_s8(), target);
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_s9(), target);
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sa(), target);
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_sb(), target);
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_sc(), target);
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_sd(), target);
  }

  // double se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_se(), target);
  }

  // double sf = 16;
  if (!(this->sf() <= 0 && this->sf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_sf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vec16)
  return target;
}

size_t vec16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vec16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 8;
  }

  // double s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 8;
  }

  // double s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 8;
  }

  // double s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 8;
  }

  // double s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 8;
  }

  // double s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 8;
  }

  // double s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 8;
  }

  // double s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 8;
  }

  // double s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 8;
  }

  // double s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 8;
  }

  // double sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 8;
  }

  // double sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 8;
  }

  // double sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 8;
  }

  // double sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 8;
  }

  // double se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    total_size += 1 + 8;
  }

  // double sf = 16;
  if (!(this->sf() <= 0 && this->sf() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void vec16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vec16)
  GOOGLE_DCHECK_NE(&from, this);
  const vec16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<vec16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vec16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vec16)
    MergeFrom(*source);
  }
}

void vec16::MergeFrom(const vec16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vec16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
  if (!(from.se() <= 0 && from.se() >= 0)) {
    _internal_set_se(from._internal_se());
  }
  if (!(from.sf() <= 0 && from.sf() >= 0)) {
    _internal_set_sf(from._internal_sf());
  }
}

void vec16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec16::CopyFrom(const vec16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec16::IsInitialized() const {
  return true;
}

void vec16::InternalSwap(vec16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
  swap(sf_, other->sf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vec16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fvec16::InitAsDefaultInstance() {
}
class fvec16::_Internal {
 public:
};

fvec16::fvec16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fvec16)
}
fvec16::fvec16(const fvec16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sf_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  // @@protoc_insertion_point(copy_constructor:fvec16)
}

void fvec16::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
}

fvec16::~fvec16() {
  // @@protoc_insertion_point(destructor:fvec16)
  SharedDtor();
}

void fvec16::SharedDtor() {
}

void fvec16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fvec16& fvec16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fvec16_Vector_2eproto.base);
  return *internal_default_instance();
}


void fvec16::Clear() {
// @@protoc_insertion_point(message_clear_start:fvec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  _internal_metadata_.Clear();
}

const char* fvec16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fvec16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fvec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_s0(), target);
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_s1(), target);
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_s2(), target);
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_s3(), target);
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s4(), target);
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s5(), target);
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_s6(), target);
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_s7(), target);
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_s8(), target);
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_s9(), target);
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sa(), target);
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sb(), target);
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_sc(), target);
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_sd(), target);
  }

  // float se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_se(), target);
  }

  // float sf = 16;
  if (!(this->sf() <= 0 && this->sf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_sf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fvec16)
  return target;
}

size_t fvec16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fvec16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float s0 = 1;
  if (!(this->s0() <= 0 && this->s0() >= 0)) {
    total_size += 1 + 4;
  }

  // float s1 = 2;
  if (!(this->s1() <= 0 && this->s1() >= 0)) {
    total_size += 1 + 4;
  }

  // float s2 = 3;
  if (!(this->s2() <= 0 && this->s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float s3 = 4;
  if (!(this->s3() <= 0 && this->s3() >= 0)) {
    total_size += 1 + 4;
  }

  // float s4 = 5;
  if (!(this->s4() <= 0 && this->s4() >= 0)) {
    total_size += 1 + 4;
  }

  // float s5 = 6;
  if (!(this->s5() <= 0 && this->s5() >= 0)) {
    total_size += 1 + 4;
  }

  // float s6 = 7;
  if (!(this->s6() <= 0 && this->s6() >= 0)) {
    total_size += 1 + 4;
  }

  // float s7 = 8;
  if (!(this->s7() <= 0 && this->s7() >= 0)) {
    total_size += 1 + 4;
  }

  // float s8 = 9;
  if (!(this->s8() <= 0 && this->s8() >= 0)) {
    total_size += 1 + 4;
  }

  // float s9 = 10;
  if (!(this->s9() <= 0 && this->s9() >= 0)) {
    total_size += 1 + 4;
  }

  // float sa = 11;
  if (!(this->sa() <= 0 && this->sa() >= 0)) {
    total_size += 1 + 4;
  }

  // float sb = 12;
  if (!(this->sb() <= 0 && this->sb() >= 0)) {
    total_size += 1 + 4;
  }

  // float sc = 13;
  if (!(this->sc() <= 0 && this->sc() >= 0)) {
    total_size += 1 + 4;
  }

  // float sd = 14;
  if (!(this->sd() <= 0 && this->sd() >= 0)) {
    total_size += 1 + 4;
  }

  // float se = 15;
  if (!(this->se() <= 0 && this->se() >= 0)) {
    total_size += 1 + 4;
  }

  // float sf = 16;
  if (!(this->sf() <= 0 && this->sf() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fvec16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fvec16)
  GOOGLE_DCHECK_NE(&from, this);
  const fvec16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fvec16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fvec16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fvec16)
    MergeFrom(*source);
  }
}

void fvec16::MergeFrom(const fvec16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fvec16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.s0() <= 0 && from.s0() >= 0)) {
    _internal_set_s0(from._internal_s0());
  }
  if (!(from.s1() <= 0 && from.s1() >= 0)) {
    _internal_set_s1(from._internal_s1());
  }
  if (!(from.s2() <= 0 && from.s2() >= 0)) {
    _internal_set_s2(from._internal_s2());
  }
  if (!(from.s3() <= 0 && from.s3() >= 0)) {
    _internal_set_s3(from._internal_s3());
  }
  if (!(from.s4() <= 0 && from.s4() >= 0)) {
    _internal_set_s4(from._internal_s4());
  }
  if (!(from.s5() <= 0 && from.s5() >= 0)) {
    _internal_set_s5(from._internal_s5());
  }
  if (!(from.s6() <= 0 && from.s6() >= 0)) {
    _internal_set_s6(from._internal_s6());
  }
  if (!(from.s7() <= 0 && from.s7() >= 0)) {
    _internal_set_s7(from._internal_s7());
  }
  if (!(from.s8() <= 0 && from.s8() >= 0)) {
    _internal_set_s8(from._internal_s8());
  }
  if (!(from.s9() <= 0 && from.s9() >= 0)) {
    _internal_set_s9(from._internal_s9());
  }
  if (!(from.sa() <= 0 && from.sa() >= 0)) {
    _internal_set_sa(from._internal_sa());
  }
  if (!(from.sb() <= 0 && from.sb() >= 0)) {
    _internal_set_sb(from._internal_sb());
  }
  if (!(from.sc() <= 0 && from.sc() >= 0)) {
    _internal_set_sc(from._internal_sc());
  }
  if (!(from.sd() <= 0 && from.sd() >= 0)) {
    _internal_set_sd(from._internal_sd());
  }
  if (!(from.se() <= 0 && from.se() >= 0)) {
    _internal_set_se(from._internal_se());
  }
  if (!(from.sf() <= 0 && from.sf() >= 0)) {
    _internal_set_sf(from._internal_sf());
  }
}

void fvec16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fvec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fvec16::CopyFrom(const fvec16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fvec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fvec16::IsInitialized() const {
  return true;
}

void fvec16::InternalSwap(fvec16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
  swap(sf_, other->sf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fvec16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ivec16::InitAsDefaultInstance() {
}
class ivec16::_Internal {
 public:
};

ivec16::ivec16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ivec16)
}
ivec16::ivec16(const ivec16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sf_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  // @@protoc_insertion_point(copy_constructor:ivec16)
}

void ivec16::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
}

ivec16::~ivec16() {
  // @@protoc_insertion_point(destructor:ivec16)
  SharedDtor();
}

void ivec16::SharedDtor() {
}

void ivec16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ivec16& ivec16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ivec16_Vector_2eproto.base);
  return *internal_default_instance();
}


void ivec16::Clear() {
// @@protoc_insertion_point(message_clear_start:ivec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  _internal_metadata_.Clear();
}

const char* ivec16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ivec16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ivec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_s0(), target);
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_s1(), target);
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_s2(), target);
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_s3(), target);
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_s4(), target);
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_s5(), target);
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_s6(), target);
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_s7(), target);
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_s8(), target);
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_s9(), target);
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_sa(), target);
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_sb(), target);
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_sc(), target);
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->_internal_sd(), target);
  }

  // sint32 se = 15;
  if (this->se() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(15, this->_internal_se(), target);
  }

  // sint32 sf = 16;
  if (this->sf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_sf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ivec16)
  return target;
}

size_t ivec16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ivec16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s0());
  }

  // sint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s1());
  }

  // sint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s2());
  }

  // sint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s3());
  }

  // sint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s4());
  }

  // sint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s5());
  }

  // sint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s6());
  }

  // sint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s7());
  }

  // sint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s8());
  }

  // sint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_s9());
  }

  // sint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sa());
  }

  // sint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sb());
  }

  // sint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sc());
  }

  // sint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sd());
  }

  // sint32 se = 15;
  if (this->se() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_se());
  }

  // sint32 sf = 16;
  if (this->sf() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_sf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ivec16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ivec16)
  GOOGLE_DCHECK_NE(&from, this);
  const ivec16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ivec16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ivec16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ivec16)
    MergeFrom(*source);
  }
}

void ivec16::MergeFrom(const ivec16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ivec16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
  if (from.se() != 0) {
    _internal_set_se(from._internal_se());
  }
  if (from.sf() != 0) {
    _internal_set_sf(from._internal_sf());
  }
}

void ivec16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ivec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ivec16::CopyFrom(const ivec16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ivec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ivec16::IsInitialized() const {
  return true;
}

void ivec16::InternalSwap(ivec16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
  swap(sf_, other->sf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ivec16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void uvec16::InitAsDefaultInstance() {
}
class uvec16::_Internal {
 public:
};

uvec16::uvec16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uvec16)
}
uvec16::uvec16(const uvec16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s0_, &from.s0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sf_) -
    reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  // @@protoc_insertion_point(copy_constructor:uvec16)
}

void uvec16::SharedCtor() {
  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
}

uvec16::~uvec16() {
  // @@protoc_insertion_point(destructor:uvec16)
  SharedDtor();
}

void uvec16::SharedDtor() {
}

void uvec16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const uvec16& uvec16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_uvec16_Vector_2eproto.base);
  return *internal_default_instance();
}


void uvec16::Clear() {
// @@protoc_insertion_point(message_clear_start:uvec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sf_) -
      reinterpret_cast<char*>(&s0_)) + sizeof(sf_));
  _internal_metadata_.Clear();
}

const char* uvec16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 s0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          s0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          s3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          s5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          s6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          s7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          s8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 s9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          s9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sb = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 se = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          se_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uvec16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uvec16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_s0(), target);
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_s1(), target);
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_s2(), target);
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_s3(), target);
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_s4(), target);
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_s5(), target);
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_s6(), target);
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_s7(), target);
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_s8(), target);
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_s9(), target);
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sa(), target);
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sb(), target);
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sc(), target);
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_sd(), target);
  }

  // uint32 se = 15;
  if (this->se() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_se(), target);
  }

  // uint32 sf = 16;
  if (this->sf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_sf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uvec16)
  return target;
}

size_t uvec16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uvec16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 s0 = 1;
  if (this->s0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s0());
  }

  // uint32 s1 = 2;
  if (this->s1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s1());
  }

  // uint32 s2 = 3;
  if (this->s2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s2());
  }

  // uint32 s3 = 4;
  if (this->s3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s3());
  }

  // uint32 s4 = 5;
  if (this->s4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s4());
  }

  // uint32 s5 = 6;
  if (this->s5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s5());
  }

  // uint32 s6 = 7;
  if (this->s6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s6());
  }

  // uint32 s7 = 8;
  if (this->s7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s7());
  }

  // uint32 s8 = 9;
  if (this->s8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s8());
  }

  // uint32 s9 = 10;
  if (this->s9() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_s9());
  }

  // uint32 sa = 11;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 sb = 12;
  if (this->sb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sb());
  }

  // uint32 sc = 13;
  if (this->sc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sc());
  }

  // uint32 sd = 14;
  if (this->sd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sd());
  }

  // uint32 se = 15;
  if (this->se() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_se());
  }

  // uint32 sf = 16;
  if (this->sf() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void uvec16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uvec16)
  GOOGLE_DCHECK_NE(&from, this);
  const uvec16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<uvec16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uvec16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uvec16)
    MergeFrom(*source);
  }
}

void uvec16::MergeFrom(const uvec16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uvec16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s0() != 0) {
    _internal_set_s0(from._internal_s0());
  }
  if (from.s1() != 0) {
    _internal_set_s1(from._internal_s1());
  }
  if (from.s2() != 0) {
    _internal_set_s2(from._internal_s2());
  }
  if (from.s3() != 0) {
    _internal_set_s3(from._internal_s3());
  }
  if (from.s4() != 0) {
    _internal_set_s4(from._internal_s4());
  }
  if (from.s5() != 0) {
    _internal_set_s5(from._internal_s5());
  }
  if (from.s6() != 0) {
    _internal_set_s6(from._internal_s6());
  }
  if (from.s7() != 0) {
    _internal_set_s7(from._internal_s7());
  }
  if (from.s8() != 0) {
    _internal_set_s8(from._internal_s8());
  }
  if (from.s9() != 0) {
    _internal_set_s9(from._internal_s9());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.sb() != 0) {
    _internal_set_sb(from._internal_sb());
  }
  if (from.sc() != 0) {
    _internal_set_sc(from._internal_sc());
  }
  if (from.sd() != 0) {
    _internal_set_sd(from._internal_sd());
  }
  if (from.se() != 0) {
    _internal_set_se(from._internal_se());
  }
  if (from.sf() != 0) {
    _internal_set_sf(from._internal_sf());
  }
}

void uvec16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uvec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uvec16::CopyFrom(const uvec16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uvec16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uvec16::IsInitialized() const {
  return true;
}

void uvec16::InternalSwap(uvec16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(s0_, other->s0_);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(s3_, other->s3_);
  swap(s4_, other->s4_);
  swap(s5_, other->s5_);
  swap(s6_, other->s6_);
  swap(s7_, other->s7_);
  swap(s8_, other->s8_);
  swap(s9_, other->s9_);
  swap(sa_, other->sa_);
  swap(sb_, other->sb_);
  swap(sc_, other->sc_);
  swap(sd_, other->sd_);
  swap(se_, other->se_);
  swap(sf_, other->sf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uvec16::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vec* Arena::CreateMaybeMessage< ::vec >(Arena* arena) {
  return Arena::CreateInternal< ::vec >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec* Arena::CreateMaybeMessage< ::fvec >(Arena* arena) {
  return Arena::CreateInternal< ::fvec >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec* Arena::CreateMaybeMessage< ::ivec >(Arena* arena) {
  return Arena::CreateInternal< ::ivec >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec* Arena::CreateMaybeMessage< ::uvec >(Arena* arena) {
  return Arena::CreateInternal< ::uvec >(arena);
}
template<> PROTOBUF_NOINLINE ::cvec* Arena::CreateMaybeMessage< ::cvec >(Arena* arena) {
  return Arena::CreateInternal< ::cvec >(arena);
}
template<> PROTOBUF_NOINLINE ::vec2* Arena::CreateMaybeMessage< ::vec2 >(Arena* arena) {
  return Arena::CreateInternal< ::vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec2* Arena::CreateMaybeMessage< ::fvec2 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec2* Arena::CreateMaybeMessage< ::ivec2 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec2* Arena::CreateMaybeMessage< ::uvec2 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec3* Arena::CreateMaybeMessage< ::vec3 >(Arena* arena) {
  return Arena::CreateInternal< ::vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec3* Arena::CreateMaybeMessage< ::fvec3 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec3* Arena::CreateMaybeMessage< ::ivec3 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec3* Arena::CreateMaybeMessage< ::uvec3 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec4* Arena::CreateMaybeMessage< ::vec4 >(Arena* arena) {
  return Arena::CreateInternal< ::vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec4* Arena::CreateMaybeMessage< ::fvec4 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec4* Arena::CreateMaybeMessage< ::ivec4 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec4* Arena::CreateMaybeMessage< ::uvec4 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec5* Arena::CreateMaybeMessage< ::vec5 >(Arena* arena) {
  return Arena::CreateInternal< ::vec5 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec5* Arena::CreateMaybeMessage< ::fvec5 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec5 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec5* Arena::CreateMaybeMessage< ::ivec5 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec5 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec5* Arena::CreateMaybeMessage< ::uvec5 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec5 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec6* Arena::CreateMaybeMessage< ::vec6 >(Arena* arena) {
  return Arena::CreateInternal< ::vec6 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec6* Arena::CreateMaybeMessage< ::fvec6 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec6 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec6* Arena::CreateMaybeMessage< ::ivec6 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec6 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec6* Arena::CreateMaybeMessage< ::uvec6 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec6 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec7* Arena::CreateMaybeMessage< ::vec7 >(Arena* arena) {
  return Arena::CreateInternal< ::vec7 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec7* Arena::CreateMaybeMessage< ::fvec7 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec7 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec7* Arena::CreateMaybeMessage< ::ivec7 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec7 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec7* Arena::CreateMaybeMessage< ::uvec7 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec7 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec8* Arena::CreateMaybeMessage< ::vec8 >(Arena* arena) {
  return Arena::CreateInternal< ::vec8 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec8* Arena::CreateMaybeMessage< ::fvec8 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec8 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec8* Arena::CreateMaybeMessage< ::ivec8 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec8 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec8* Arena::CreateMaybeMessage< ::uvec8 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec8 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec9* Arena::CreateMaybeMessage< ::vec9 >(Arena* arena) {
  return Arena::CreateInternal< ::vec9 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec9* Arena::CreateMaybeMessage< ::fvec9 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec9 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec9* Arena::CreateMaybeMessage< ::ivec9 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec9 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec9* Arena::CreateMaybeMessage< ::uvec9 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec9 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec10* Arena::CreateMaybeMessage< ::vec10 >(Arena* arena) {
  return Arena::CreateInternal< ::vec10 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec10* Arena::CreateMaybeMessage< ::fvec10 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec10 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec10* Arena::CreateMaybeMessage< ::ivec10 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec10 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec10* Arena::CreateMaybeMessage< ::uvec10 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec10 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec11* Arena::CreateMaybeMessage< ::vec11 >(Arena* arena) {
  return Arena::CreateInternal< ::vec11 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec11* Arena::CreateMaybeMessage< ::fvec11 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec11 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec11* Arena::CreateMaybeMessage< ::ivec11 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec11 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec11* Arena::CreateMaybeMessage< ::uvec11 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec11 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec12* Arena::CreateMaybeMessage< ::vec12 >(Arena* arena) {
  return Arena::CreateInternal< ::vec12 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec12* Arena::CreateMaybeMessage< ::fvec12 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec12 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec12* Arena::CreateMaybeMessage< ::ivec12 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec12 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec12* Arena::CreateMaybeMessage< ::uvec12 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec12 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec13* Arena::CreateMaybeMessage< ::vec13 >(Arena* arena) {
  return Arena::CreateInternal< ::vec13 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec13* Arena::CreateMaybeMessage< ::fvec13 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec13 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec13* Arena::CreateMaybeMessage< ::ivec13 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec13 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec13* Arena::CreateMaybeMessage< ::uvec13 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec13 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec14* Arena::CreateMaybeMessage< ::vec14 >(Arena* arena) {
  return Arena::CreateInternal< ::vec14 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec14* Arena::CreateMaybeMessage< ::fvec14 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec14 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec14* Arena::CreateMaybeMessage< ::ivec14 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec14 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec14* Arena::CreateMaybeMessage< ::uvec14 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec14 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec15* Arena::CreateMaybeMessage< ::vec15 >(Arena* arena) {
  return Arena::CreateInternal< ::vec15 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec15* Arena::CreateMaybeMessage< ::fvec15 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec15 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec15* Arena::CreateMaybeMessage< ::ivec15 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec15 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec15* Arena::CreateMaybeMessage< ::uvec15 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec15 >(arena);
}
template<> PROTOBUF_NOINLINE ::vec16* Arena::CreateMaybeMessage< ::vec16 >(Arena* arena) {
  return Arena::CreateInternal< ::vec16 >(arena);
}
template<> PROTOBUF_NOINLINE ::fvec16* Arena::CreateMaybeMessage< ::fvec16 >(Arena* arena) {
  return Arena::CreateInternal< ::fvec16 >(arena);
}
template<> PROTOBUF_NOINLINE ::ivec16* Arena::CreateMaybeMessage< ::ivec16 >(Arena* arena) {
  return Arena::CreateInternal< ::ivec16 >(arena);
}
template<> PROTOBUF_NOINLINE ::uvec16* Arena::CreateMaybeMessage< ::uvec16 >(Arena* arena) {
  return Arena::CreateInternal< ::uvec16 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
